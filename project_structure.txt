Project Root Directory
│
├── public/
│   └── images/  <-- USER MUST CREATE THIS FOLDER AND ADD THEIR IMAGES HERE
│       ├── agrumi_datteri_castagne.jpg
│       ├── albicocche_ingrosso.jpg
│       ├── ananas_fruitpoint.jpg
│       ├── angurie.jpg
│       ├── arance_felici.jpg
│       ├── bottamedi_logo_glow.jpg
│       ├── bottamedi_logo_solofrutta_glow.jpg
│       ├── frutta_disidratata_dettaglio.jpg
│       ├── frutta_disidratata_display.jpg
│       ├── kiwi_cuore.jpg
│       ├── kiwi_gialli_pattern.jpg
│       ├── map_banchetto.png
│       ├── map_ingrosso.png
│       ├── mele_golden.jpg
│       ├── mele_montagna.jpg
│       ├── mele_pink_lady.jpg
│       ├── meloni_sattin.jpg
│       ├── pomodori_cuore_bue.jpg
│       ├── sacchetti_frutta_disidratata.jpg
│       └── zucche_decorate.jpg
│
├── src/
│   ├── components/
│   │   ├── layout/
│   │   │   ├── Footer.tsx
│   │   │   ├── Header.tsx
│   │   │   └── MobileNav.tsx
│   │   ├── sections/
│   │   │   ├── ContactSection.tsx
│   │   │   ├── HeroSection.tsx
│   │   │   ├── IntroSection.tsx
│   │   │   ├── RetailSection.tsx
│   │   │   ├── StorySection.tsx
│   │   │   ├── WholesaleSection.tsx
│   │   │   └── WhyUsSection.tsx
│   │   ├── ui/
│   │   │   ├── Button.tsx
│   │   │   ├── Gallery.tsx
│   │   │   ├── LanguageCookieModal.tsx
│   │   │   ├── Lightbox.tsx
│   │   │   ├── Preloader.tsx
│   │   │   └── Section.tsx
│   │   └── icons/
│   │       └── HeroIcons.tsx
│   │
│   ├── contexts/
│   │   └── LanguageContext.tsx
│   │
│   ├── App.tsx
│   ├── index.tsx
│   ├── translations.ts
│   └── types.ts
│
├── index.html
└── metadata.json

========================================
Content of: index.html
========================================
<!DOCTYPE html>
<html lang="it" class="scroll-smooth">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <!-- SEO: Title will be dynamically set by React Helmet or similar -->
  <title>Bottamedi Frutta e Verdura | Freschezza Trentina, Qualità Superiore</title>
  <!-- SEO: Meta description will be dynamically set -->
  <meta name="description" content="Scopri la freschezza quotidiana e la qualità superiore di Bottamedi. Frutta e verdura all'ingrosso per HORECA e vendita al dettaglio a Mezzolombardo, Trentino. Tradizione e innovazione dal [ANNO NONNO].">
  <!-- SEO: Keywords will be dynamically set -->
  <meta name="keywords" content="frutta e verdura, mezzolombardo, trentino, ingrosso ortofrutta, dettaglio frutta verdura, Bottamedi, prodotti freschi, qualità, HORECA, ristoranti, hotel, catering, Melinda, prodotti tipici trentini, spesa online trentino, obst und gemüse, großhandel, einzelhandel, Trentino">
  <!-- SEO: Add more meta tags as needed (author, canonical, OpenGraph, Twitter Cards) via React Helmet -->
  <!-- SEO: hreflang tags for alternative languages will be added dynamically -->

  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Playfair+Display:wght@400;600;700&family=Sonsie+One&display=swap" rel="stylesheet">
  <script>
    tailwind.config = {
      theme: {
        extend: {
          fontFamily: {
            sans: ['Inter', 'sans-serif'],
            serif: ['Playfair Display', 'serif'],
            display: ['Sonsie One', 'cursive'], 
          },
          colors: {
            'brand-green': {
              light: '#A0D6BB', 
              DEFAULT: '#1A7A4C', 
              dark: '#135A38', 
            },
            'brand-yellow': {
              light: '#FFFBEB',
              DEFAULT: '#FDE047', 
              dark: '#FBBF24',
            },
            'brand-orange': {
              DEFAULT: '#F97316', 
              dark: '#DD6B20', 
            },
            'brand-red': {
              DEFAULT: '#EF4444', 
            },
            'brand-gray': {
              light: '#F9FAFB', 
              DEFAULT: '#6B7280', 
              dark: '#1F2937',
              extralight: '#F3F4F6', 
            }
          },
          animation: {
            'fade-in-up': 'fadeInUp 0.7s ease-out forwards',
            'slide-in-bottom': 'slideInBottom 0.6s ease-out forwards',
            'subtle-bob': 'subtleBob 3s ease-in-out infinite',
          },
          keyframes: {
            fadeInUp: {
              '0%': { opacity: '0', transform: 'translateY(25px)' },
              '100%': { opacity: '1', transform: 'translateY(0)' },
            },
            slideInBottom: {
              '0%': { transform: 'translateY(100%)', opacity: '0'},
              '100%': { transform: 'translateY(0)', opacity: '1'},
            },
            subtleBob: {
              '0%, 100%': { transform: 'translateY(0)' },
              '50%': { transform: 'translateY(-5px)' },
            }
          }
        }
      }
    }
  </script>
<script type="importmap">
{
  "imports": {
    "react/": "https://esm.sh/react@^19.1.0/",
    "react": "https://esm.sh/react@^19.1.0",
    "react-dom/": "https://esm.sh/react-dom@^19.1.0/",
    "react/jsx-runtime": "https://esm.sh/react@^19.1.0/jsx-runtime",
    "react-helmet-async": "https://esm.sh/react-helmet-async@^2.0.5",
    "gsap": "https://esm.sh/gsap@^3.13.0",
    "gsap/ScrollTrigger": "https://esm.sh/gsap@^3.13.0/ScrollTrigger.js",
    "gsap/ScrollToPlugin": "https://esm.sh/gsap@^3.13.0/ScrollToPlugin.js",
    "gsap/TextPlugin": "https://esm.sh/gsap@^3.13.0/TextPlugin.js",
    "gsap/SplitText": "https://esm.sh/gsap@^3.13.0/SplitText.js",
    "gsap/": "https://esm.sh/gsap@^3.13.0/"
  }
}
</script>
  <style>
    .button-ripple {
      position: absolute;
      border-radius: 50%;
      transform: scale(0);
      pointer-events: none;
    }
     #hero-particle-canvas {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 5; 
      pointer-events: none; 
    }
    body { 
        visibility: visible;
    }
  </style>
</head>
<body id="bottamedi-app" class="font-sans text-brand-gray-dark bg-white antialiased overflow-x-hidden">
  <div id="root"></div>
  <script type="module" src="/index.tsx"></script>
</body>
</html>

========================================
Content of: metadata.json
========================================
{
  "name": "Bottamedi Frutta e Verdura",
  "description": "Scopri Bottamedi Frutta e Verdura a Mezzolombardo, Trentino. Qualità superiore e freschezza quotidiana per HORECA e dettaglio. Tradizione familiare dal 1950, ora con un sito moderno e interattivo in italiano e tedesco.",
  "requestFramePermissions": [],
  "keywords": "frutta e verdura, mezzolombardo, trentino, ingrosso ortofrutta, dettaglio frutta verdura, Bottamedi, prodotti freschi, qualità, HORECA, ristoranti, hotel, catering, Melinda, prodotti tipici trentini, spesa online trentino, obst und gemüse, großhandel, einzelhandel, Trentino, Südtirol, i18n, multilingua, GSAP, animazioni WOW",
  "prompt": ""
}
========================================
Content of: src/App.tsx
========================================
import React, { useState, useEffect, Suspense } from 'react';
import { Helmet, HelmetProvider } from 'react-helmet-async';
import Header from './components/layout/Header';
import Footer from './components/layout/Footer';
import HeroSection from './components/sections/HeroSection';
import IntroSection from './components/sections/IntroSection';
import StorySection from './components/sections/StorySection';
import RetailSection from './components/sections/RetailSection';
import WholesaleSection from './components/sections/WholesaleSection';
import WhyUsSection from './components/sections/WhyUsSection';
import ContactSection from './components/sections/ContactSection';
import MobileNav from './components/layout/MobileNav';
import Preloader from './components/ui/Preloader';
import { NavLink } from './types';
import { gsap } from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';
import { ScrollToPlugin } from 'gsap/ScrollToPlugin';
import { TextPlugin } from 'gsap/TextPlugin';
import { SplitText } from 'gsap/SplitText'; 
import { LanguageProvider, useLanguage } from './contexts/LanguageContext';
import LanguageCookieModal from './components/ui/LanguageCookieModal';

// Register GSAP plugins globally
gsap.registerPlugin(ScrollTrigger, ScrollToPlugin, TextPlugin, SplitText);

interface NavLinkDataItem {
  id: string;
  href?: string; 
  labelKey: string;
  defaultLabel: string;
}

const navLinksData: NavLinkDataItem[] = [
  { id: 'storia', labelKey: 'nav.storia', defaultLabel: 'La Nostra Storia' },
  { id: 'dettaglio', labelKey: 'nav.banchetto', defaultLabel: 'Al Banchetto' },
  { id: 'ingrosso', labelKey: 'nav.ingrosso', defaultLabel: 'Servizi Ingrosso' },
  { id: 'perche-noi', labelKey: 'nav.percheNoi', defaultLabel: 'Perché Noi' },
  { id: 'contatti', labelKey: 'nav.contatti', defaultLabel: 'Contatti' },
];

const APP_LOADING_SIMULATION_DURATION = 1500; 

const AppContent: React.FC = () => {
  const [loading, setLoading] = useState(true);
  const { language, t } = useLanguage();

  useEffect(() => {
    const timer = setTimeout(() => setLoading(false), APP_LOADING_SIMULATION_DURATION);
    return () => clearTimeout(timer);
  }, []);

  const resolvedNavLinks: NavLink[] = navLinksData.map(link => ({
    id: link.id,
    label: t(link.labelKey, link.defaultLabel)
  }));

  const siteName = "Bottamedi Frutta e Verdura";
  const defaultTitle = `${siteName} | ${t('hero.subtitle', 'Freschezza Trentina, Qualità Superiore')}`;
  const defaultDescription = t('hero.tagline', 'Scopri la freschezza quotidiana e la qualità superiore di Bottamedi. Frutta e verdura all\'ingrosso per HORECA e vendita al dettaglio a Mezzolombardo, Trentino.');


  if (loading) {
    return <Preloader />;
  }

  return (
    <>
      <Helmet htmlAttributes={{ lang: language }}>
        <title>{defaultTitle}</title>
        <meta name="description" content={defaultDescription} />
      </Helmet>
      <div className="flex flex-col min-h-screen bg-white">
        <Header navLinks={resolvedNavLinks} />
        <main className="flex-grow">
          <HeroSection />
          <IntroSection />
          <StorySection />
          <RetailSection />
          <WholesaleSection />
          <WhyUsSection />
          <ContactSection />
        </main>
        <Footer />
        <MobileNav navLinks={resolvedNavLinks} />
        <LanguageCookieModal />
      </div>
    </>
  );
}


const App: React.FC = () => {
  return (
    <HelmetProvider>
      <Suspense fallback={<div className="fixed inset-0 bg-white flex items-center justify-center z-[300]"><p>Loading...</p></div>}>
        <LanguageProvider>
          <AppContent />
        </LanguageProvider>
      </Suspense>
    </HelmetProvider>
  );
};

export default App;
========================================
Content of: src/index.tsx
========================================
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const rootElement = document.getElementById('root');
if (!rootElement) {
  throw new Error("Could not find root element to mount to");
}

const root = ReactDOM.createRoot(rootElement);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
========================================
Content of: src/translations.ts
========================================
export type Locale = 'it' | 'de';

export interface Translations {
  [key: string]: string | Translations;
}

export const translations: Record<Locale, Translations> = {
  it: {
    // Global
    global: {
      viewOnMap: "Visualizza su Google Maps",
    },
    // Header
    header: {
      logoAlt: "Logo Bottamedi Frutta e Verdura"
    },
    // Navigation
    nav: {
      storia: "La Nostra Storia",
      banchetto: "Al Banchetto",
      ingrosso: "Servizi Ingrosso",
      percheNoi: "Perché Noi",
      contatti: "Contatti",
      home: "Home",
      menu: "Menu",
      call: "Chiama",
      maps: "Mappe",
      banchettoContact: "Banchetto",
      ingrossoContact: "Ingrosso",
      banchettoMap: "Mappa Banchetto",
      ingrossoMap: "Mappa Ingrosso",
    },
    // Preloader
    preloader: {
      loading: "Esplosione di freschezza in arrivo...",
    },
    // Hero Section
    hero: {
      title: "BOTTAMEDI",
      subtitle: "Frutta e Verdura",
      tagline: "L'essenza del Trentino, dal 1950. Freschezza che ispira, qualità che conquista.",
      cta: {
        banchetto: "Scopri il Banchetto",
        ingrosso: "Servizi HORECA",
        storia: "La Nostra Storia" 
      }
    },
    // Intro Section
    intro: {
      title: "Bottamedi: Dove la Natura Incontra la Passione da Tre Generazioni.",
      annoNonno: "1950", 
      nomeNonno: "Luigi", 
      paragraph1: "Un viaggio iniziato nel cuore del Trentino nel {{annoNonno}}, quando nonno {{nomeNonno}} piantò il primo seme di una visione: portare sulla vostra tavola non solo frutta e verdura, ma l'essenza stessa della nostra terra. ",
      paragraph2: "Oggi, quella visione fiorisce nel nostro vivace Banchetto a Mezzolombardo e nel servizio HORECA dedicato, testimoni di una freschezza che si tocca e di una qualità che si assapora, giorno dopo giorno."
    },
    // Story Section
    story: {
      mainTitle: "La Saga dei Sapori: Tre Generazioni, Un'Unica Passione.",
      event1: {
        period: "Anni '50", 
        title: "Le Radici del Sapore: L'Inizio di un Sogno",
        description: "Tutto ebbe inizio con nonno Luigi. Con mani sapienti e un cuore colmo di dedizione per la terra trentina, piantò il seme di un'attività destinata a fiorire, fondata su qualità autentica e fiducia incrollabile.",
        imageAlt: "Nonno Bottamedi con le prime mele Golden, simbolo di tradizione e inizio attività"
      },
      event2: {
        period: "Anni '80", 
        title: "L'Orizzonte si Allarga: Crescita e Innovazione",
        description: "L'eredità sbocciò ulteriormente con papà Giovanni. Le albe trascorse ai mercati, la ricerca instancabile delle primizie più prelibate e il consolidamento dei rapporti trasformarono la passione in un servizio ortofrutticolo strutturato e apprezzato in tutto il Trentino.",
        imageAlt: "Papà Bottamedi tra cassette di pomodori cuore di bue, simbolo di espansione"
      },
      event3: {
        period: "Oggi",
        title: "Il Futuro nelle Nostre Mani: Passione che Continua",
        description: "Oggi, Pierluigi e tutta la famiglia Bottamedi custodiscono questa fiamma. Freschezza assoluta, genuinità incontaminata e un rapporto diretto e trasparente, sia al dettaglio nel nostro Banchetto che all'ingrosso per il settore HORECA, proiettano la nostra storia nel futuro.",
        imageAlt: "La famiglia Bottamedi oggi, con un cuore di kiwi freschi a simboleggiare la passione continua"
      },
      closingThought: "Bottamedi: una sinfonia di famiglia, coltivata con la melodia della natura, per orchestrare ogni giorno il capolavoro del gusto sulla vostra tavola."
    },
    // Retail Section
    retail: {
      mainImageAlt: "Il colorato ed accogliente banchetto di Bottamedi Frutta e Verdura a Mezzolombardo",
      title: "L'Eden del Gusto Quotidiano: Il Nostro Banchetto",
      description: "Immergiti in un'esplosione di colori e profumi al nostro storico Banchetto in Via Cavalleggeri Udine, Mezzolombardo. Ogni giorno, selezioniamo per te solo il meglio: frutta succosa, verdure croccanti e specialità locali, presentate con la passione e la cura che ci definiscono da generazioni.",
      cta: "Orari e Contatti del Banchetto",
    },
    gallery: { 
      alt: {
        stagione: "Arcobaleno di frutta fresca di stagione al banchetto Bottamedi",
        pomodori: "Pomodori cuore di bue rossi, maturi e profumati",
        melinda: "Mele Golden Melinda DOC del Trentino, croccanti e succose",
        angurie: "Fette di anguria rossa e dissetante, perfetta per l'estate",
        meloni: "Meloni Sattin 'Dolce Passione', profumati e dolcissimi",
        disidratata: "Assortimento colorato di frutta disidratata e frutta secca",
      },
      caption: {
        stagione: "Un arcobaleno di freschezza: frutta di stagione, verdure locali e delizie tipiche ti aspettano al nostro Banchetto.",
        pomodori: "Il vero sapore dell'orto: pomodori cuore di bue coltivati con passione, per sughi e insalate indimenticabili.",
        melinda: "L'oro del Trentino: le inconfondibili Mele Golden Melinda, un classico di dolcezza e croccantezza.",
        angurie: "Un'esplosione di freschezza estiva: le nostre angurie, dolci e dissetanti, perfette per ogni momento.",
        meloni: "Meloni Sattin 'Dolce Passione': un profumo avvolgente e una dolcezza che conquista, coltivati con amore.",
        disidratata: "Oltre il fresco: scopri un mondo di sapori concentrati nella nostra selezione di frutta disidratata e specialità secche.",
      },
      title: {
        stagione: "Tesori di Stagione",
        pomodori: "Rosso Passione",
        melinda: "Golden Melinda DOC",
        angurie: "Regine dell'Estate",
        meloni: "Meloni Sublimi",
        disidratata: "Gioielli Essiccati",
      }
    },
    // Wholesale Section
    wholesale: {
      title: "Partner d'Eccellenza per la Tua Cucina Professionale",
      subtitle: "Servizio HORECA: Freschezza Insuperabile, Affidabilità Totale.",
      description: "Professionisti della ristorazione, hotel, catering e negozi alimentari del Trentino: elevate la vostra offerta con la qualità Bottamedi. Tre generazioni di esperienza per forniture ortofrutticole impeccabili, prodotti freschissimi e un servizio di consegna personalizzato che rispetta i vostri tempi e le vostre esigenze.",
      feature1: "Approvvigionamento d'eccellenza: solo produttori fidati e mercati selezionati per garantire qualità superiore e freschezza impareggiabile.",
      feature2: "Logistica su misura: consegne flessibili e puntuali, 6 giorni su 7, in aree concordate. La tua attività non rimarrà mai senza il meglio.",
      feature3: "Controllo qualità maniacale: ogni prodotto è ispezionato per assicurare sapore intenso, aspetto invitante e presentazione impeccabile.",
      feature4: "Consulenza personalizzata HORECA: Pierluigi è il tuo referente diretto per prezzi competitivi, consigli esperti e un rapporto di fiducia solido e duraturo.",
      contactPierluigi: "Per listini su misura e consulenza diretta, contatta",
      cta: "Richiedi Info Ingrosso",
      imageAlt: "Casse di albicocche fresche e ordinate, pronte per la fornitura ingrosso HORECA da Bottamedi"
    },
    // Why Us Section
    whyus: {
      title: "Il Segreto della Nostra Unicità",
      subtitle: "Scegliere Bottamedi non è solo acquistare frutta e verdura. È abbracciare una filosofia di freschezza impareggiabile, qualità certificata e un'attenzione al cliente che solo una famiglia appassionata può offrirti.",
      feature1: {
        title: "Freschezza Assoluta: Il Nostro Credo",
        description: "Ogni mattina, selezioniamo personalmente solo il meglio. Collaborazioni dirette con produttori di fiducia per garantirti un prodotto che profuma ancora di campo, vibrante di sapore e nutrimento.",
        alt: "Pattern ipnotico di kiwi gialli freschi, simbolo di freschezza assoluta"
      },
      feature2: {
        title: "Qualità d'Eccellenza: L'Arte della Scelta",
        description: "L'esperienza di tre generazioni si traduce in un occhio infallibile per l'eccellenza. Solo i prodotti che superano i nostri rigorosi standard arrivano sulla tua tavola o nella tua attività.",
        alt: "Splendide mele di montagna in cassetta, simbolo di qualità d'eccellenza"
      },
      feature3: {
        title: "Cuore di Famiglia: Passione Contagiosa",
        description: "Non siamo solo fornitori, siamo una famiglia che condivide una passione. Ti accogliamo con un sorriso, ti consigliamo con sincerità, perché la tua soddisfazione è la nostra più grande ricompensa.",
        alt: "Kiwi di varie tonalità disposti a formare un cuore, simbolo della passione familiare"
      },
      feature4: {
        title: "Radici Trentine: Autenticità Garantita",
        description: "Amiamo profondamente il nostro Trentino. Valorizziamo i suoi produttori e ti offriamo l'autenticità dei sapori locali, per un'esperienza di gusto genuina e indimenticabile.",
        alt: "Logo luminoso di Bottamedi Frutta e Verdura, che simboleggia le radici nel territorio trentino"
      },
    },
    // Contact Section
    contact: {
      title: "Restiamo in Contatto: Trovaci, Chiamaci, Scrivici!",
      subtitle: "Il sapore autentico del Trentino è più vicino di quanto pensi. Vieni a scoprire la qualità Bottamedi al nostro Banchetto, o contatta Pierluigi per le esigenze HORECA. La nostra famiglia è pronta ad accoglierti!",
      banchettoTitle: "Banchetto: Il Cuore della Freschezza",
      banchettoAddress: "Via Cavalleggeri Udine, 38017 Mezzolombardo (TN)",
      banchettoPhone: "Banchetto: 351 577 6198",
      banchettoHours: "Orari: Lunedì - Sabato: 07:00 – 19:30",
      ingrossoTitle: "Ingrosso HORECA: Qualità per Professionisti",
      ingrossoAddress: "Magazzino: Via Alcide de Gasperi, 47, 38017 Mezzolombardo (TN)",
      ingrossoPhone: "Ingrosso HORECA: 0461 602534",
      ingrossoEmail: "bottamedipierluigi@virgilio.it",
      mapTitle: "Le Nostre Radici, a Portata di Click",
      mapBanchettoCta: "Mappa Banchetto",
      mapIngrossoCta: "Mappa Ingrosso",
    },
    // Footer
    footer: {
      proprietor: "Frutta e Verdura di Pierluigi Bottamedi.",
      rights: "Tutti i diritti riservati.",
      banchettoTitle: "Banchetto (Dettaglio)",
      banchettoAddress: "Via Cavalleggeri Udine, Mezzolombardo (TN)",
      banchettoPhone: "Tel: 351 577 6198",
      ingrossoTitle: "Ingrosso (HORECA)",
      ingrossoAddress: "Via A. de Gasperi, 47, Mezzolombardo (TN)",
      ingrossoPhone: "Tel: 0461 602534",
      contactUs: "Contattaci",
      credits: "Sito web realizzato con passione.",
    },
    // Language & Cookie Modal
    langCookieModal: {
      title: "Benvenuto! / Willkommen!",
      languageSelectLabel: "Seleziona la tua lingua / Bitte wählen Sie Ihre Sprache:",
      italian: "Italiano",
      german: "Deutsch",
      cookieMessage: "Utilizziamo i cookie per assicurarti la migliore esperienza sul nostro sito e per ricordare la tua preferenza linguistica. Cliccando 'Accetta', acconsenti al loro utilizzo.",
      cookieMessageDE: "Wir verwenden Cookies, um Ihnen das beste Erlebnis auf unserer Website zu gewährleisten und Ihre Sprachpräferenz zu speichern. Indem Sie auf 'Akzeptieren' klicken, stimmen Sie deren Verwendung zu.", // This should be the German message for German selection.
      acceptButton: "Accetta / Akzeptieren",
    }
  },
  de: {
    // Global
    global: {
      viewOnMap: "Auf Google Maps ansehen",
    },
    // Header
    header: {
      logoAlt: "Bottamedi Obst & Gemüse Logo"
    },
    // Navigation
    nav: {
      storia: "Unsere Geschichte",
      banchetto: "Am Marktstand",
      ingrosso: "Großhandel Service",
      percheNoi: "Warum Wir",
      contatti: "Kontakt",
      home: "Startseite",
      menu: "Menü",
      call: "Anrufen",
      maps: "Karten",
      banchettoContact: "Marktstand",
      ingrossoContact: "Großhandel",
      banchettoMap: "Karte Marktstand",
      ingrossoMap: "Karte Großhandel",
    },
    // Preloader
    preloader: {
      loading: "Frische-Explosion im Anflug...",
    },
    // Hero Section
    hero: {
      title: "BOTTAMEDI",
      subtitle: "Obst & Gemüse",
      tagline: "Die Essenz des Trentino, seit 1950. Frische, die inspiriert, Qualität, die überzeugt.",
      cta: {
        banchetto: "Marktstand Entdecken",
        ingrosso: "HORECA Service",
        storia: "Unsere Geschichte"
      }
    },
    // Intro Section
    intro: {
      title: "Bottamedi: Wo Natur auf Leidenschaft trifft – seit drei Generationen.",
      annoNonno: "1950", 
      nomeNonno: "Luigi", 
      paragraph1: "Eine Reise, die {{annoNonno}} im Herzen des Trentino begann, als Opa {{nomeNonno}} den ersten Samen einer Vision pflanzte: nicht nur Obst und Gemüse auf Ihren Tisch zu bringen, sondern die Seele unseres Landes.",
      paragraph2: "Heute blüht diese Vision in unserem lebhaften Marktstand in Mezzolombardo und im engagierten HORECA-Service auf – Zeugen einer Frische, die man spürt, und einer Qualität, die man schmeckt, Tag für Tag."
    },
    story: {
      mainTitle: "Die Saga des Geschmacks: Drei Generationen, Eine Leidenschaft.",
      event1: {
        period: "50er Jahre", 
        title: "Die Wurzeln des Geschmacks: Der Beginn eines Traums",
        description: "Alles begann mit Großvater Luigi. Mit geschickten Händen und einem Herzen voller Hingabe für das Trentiner Land säte er den Samen für ein blühendes Geschäft, gegründet auf authentischer Qualität und unerschütterlichem Vertrauen.",
        imageAlt: "Opa Bottamedi mit den ersten Golden Delicious Äpfeln, Symbol für Tradition und Geschäftsbeginn"
      },
      event2: {
        period: "80er Jahre", 
        title: "Der Horizont erweitert sich: Wachstum und Innovation",
        description: "Das Erbe erblühte weiter mit Vater Giovanni. Die auf den Märkten verbrachten Morgenstunden, die unermüdliche Suche nach den erlesensten Frühprodukten und die Festigung der Beziehungen verwandelten die Leidenschaft in einen strukturierten und in ganz Trentino geschätzten Obst- und Gemüseservice.",
        imageAlt: "Vater Bottamedi zwischen Kisten mit Ochsenherztomaten, Symbol der Expansion"
      },
      event3: {
        period: "Heute",
        title: "Die Zukunft in unseren Händen: Fortwährende Leidenschaft",
        description: "Heute hüten Pierluigi und die ganze Familie Bottamedi diese Flamme. Absolute Frische, unverfälschte Echtheit und eine direkte, transparente Beziehung, sowohl im Detail an unserem Marktstand als auch im Großhandel für den HORECA-Sektor, tragen unsere Geschichte in die Zukunft.",
        imageAlt: "Die Familie Bottamedi heute, mit einem Herz aus frischen Kiwis als Symbol für die fortwährende Leidenschaft"
      },
      closingThought: "Bottamedi: eine Familiensymphonie, kultiviert mit der Melodie der Natur, um täglich das Meisterwerk des Geschmacks auf Ihrem Tisch zu orchestrieren."
    },
    retail: {
      mainImageAlt: "Der farbenfrohe und einladende Marktstand von Bottamedi Obst und Gemüse in Mezzolombardo",
      title: "Der Garten Eden des täglichen Geschmacks: Unser Marktstand",
      description: "Tauchen Sie ein in eine Explosion von Farben und Düften an unserem historischen Marktstand in der Via Cavalleggeri Udine, Mezzolombardo. Jeden Tag wählen wir für Sie nur das Beste aus: saftiges Obst, knackiges Gemüse und lokale Spezialitäten, präsentiert mit der Leidenschaft und Sorgfalt, die uns seit Generationen auszeichnen.",
      cta: "Öffnungszeiten & Kontakt Marktstand",
    },
    gallery: {
      alt: {
        stagione: "Regenbogen aus frischem saisonalem Obst am Bottamedi Marktstand",
        pomodori: "Rote, reife und duftende Ochsenherztomaten",
        melinda: "Golden Delicious Äpfel DOC aus dem Trentino, knackig und saftig",
        angurie: "Scheiben roter, durstlöschender Wassermelone, perfekt für den Sommer",
        meloni: "Sattin Melonen 'Dolce Passione', duftend und sehr süß",
        disidratata: "Bunte Auswahl an Trockenfrüchten und Nüssen",
      },
      caption: {
        stagione: "Ein Regenbogen der Frische: saisonales Obst, lokales Gemüse und typische Köstlichkeiten erwarten Sie an unserem Marktstand.",
        pomodori: "Der wahre Geschmack des Gartens: mit Leidenschaft angebaute Ochsenherztomaten für unvergessliche Saucen und Salate.",
        melinda: "Das Gold des Trentino: die unverwechselbaren Golden Delicious Äpfel, ein Klassiker an Süße und Knackigkeit.",
        angurie: "Eine Explosion sommerlicher Frische: unsere Wassermelonen, süß und durstlöschend, perfekt für jeden Moment.",
        meloni: "Sattin Melonen 'Dolce Passione': ein umhüllender Duft und eine Süße, die erobert, mit Liebe angebaut.",
        disidratata: "Mehr als nur frisch: Entdecken Sie eine Welt konzentrierter Aromen in unserer Auswahl an Trockenfrüchten und Nussspezialitäten.",
      },
      title: {
        stagione: "Saisonale Schätze",
        pomodori: "Rote Leidenschaft",
        melinda: "Golden Melinda DOC",
        angurie: "Königinnen des Sommers",
        meloni: "Erhabene Melonen",
        disidratata: "Getrocknete Juwelen",
      }
    },
    wholesale: {
      title: "Exzellenzpartner für Ihre professionelle Küche",
      subtitle: "HORECA Service: Unübertroffene Frische, absolute Zuverlässigkeit.",
      description: "Profis aus Gastronomie, Hotellerie, Catering und Lebensmittelhandel im Trentino: Steigern Sie Ihr Angebot mit der Qualität von Bottamedi. Drei Generationen Erfahrung für tadellose Obst- und Gemüselieferungen, frischeste Produkte und einen personalisierten Lieferservice, der Ihre Zeiten und Bedürfnisse respektiert.",
      feature1: "Exzellente Beschaffung: Nur vertrauenswürdige Produzenten und ausgewählte Märkte, um höchste Qualität und unvergleichliche Frische zu garantieren.",
      feature2: "Maßgeschneiderte Logistik: Flexible und pünktliche Lieferungen, 6 Tage die Woche, in vereinbarten Gebieten. Ihr Betrieb wird nie ohne das Beste sein.",
      feature3: "Penible Qualitätskontrolle: Jedes Produkt wird geprüft, um intensiven Geschmack, einladendes Aussehen und eine makellose Präsentation zu gewährleisten.",
      feature4: "Persönliche HORECA-Beratung: Pierluigi ist Ihr direkter Ansprechpartner für wettbewerbsfähige Preise, fachkundige Ratschläge und eine solide, dauerhafte Vertrauensbeziehung.",
      contactPierluigi: "Für maßgeschneiderte Preislisten und direkte Beratung kontaktieren Sie",
      cta: "Großhandelsinfos Anfragen",
      imageAlt: "Kisten mit frischen, sortierten Aprikosen, bereit für die HORECA-Großhandelslieferung von Bottamedi"
    },
    whyus: {
      title: "Das Geheimnis unserer Einzigartigkeit",
      subtitle: "Bottamedi zu wählen bedeutet nicht nur Obst und Gemüse zu kaufen. Es bedeutet, eine Philosophie unvergleichlicher Frische, zertifizierter Qualität und einer Kundenbetreuung anzunehmen, die Ihnen nur eine leidenschaftliche Familie bieten kann.",
      feature1: {
        title: "Absolute Frische: Unser Credo",
        description: "Jeden Morgen wählen wir persönlich nur das Beste aus. Direkte Zusammenarbeit mit Vertrauensproduzenten, um Ihnen ein Produkt zu garantieren, das noch nach Feld duftet, lebendig an Geschmack und Nährstoffen.",
        alt: "Hypnotisches Muster aus frischen gelben Kiwis, Symbol absoluter Frische"
      },
      feature2: {
        title: "Exzellente Qualität: Die Kunst der Wahl",
        description: "Die Erfahrung von drei Generationen führt zu einem unfehlbaren Auge für Exzellenz. Nur Produkte, die unsere strengen Standards erfüllen, gelangen auf Ihren Tisch oder in Ihr Geschäft.",
        alt: "Prächtige Bergäpfel in einer Kiste, Symbol für exzellente Qualität"
      },
      feature3: {
        title: "Familienherz: Ansteckende Leidenschaft",
        description: "Wir sind nicht nur Lieferanten, wir sind eine Familie, die eine Leidenschaft teilt. Wir empfangen Sie mit einem Lächeln, beraten Sie aufrichtig, denn Ihre Zufriedenheit ist unsere größte Belohnung.",
        alt: "Kiwis verschiedener Farbtöne in Herzform angeordnet, Symbol familiärer Leidenschaft"
      },
      feature4: {
        title: "Trentiner Wurzeln: Garantierte Authentizität",
        description: "Wir lieben unser Trentino zutiefst. Wir schätzen seine Produzenten und bieten Ihnen die Authentizität lokaler Aromen für ein echtes und unvergessliches Geschmackserlebnis.",
        alt: "Leuchtendes Logo von Bottamedi Obst und Gemüse, das die Wurzeln im Trentiner Gebiet symbolisiert"
      },
    },
    contact: {
      title: "Bleiben wir in Kontakt: Finden, Anrufen, Schreiben Sie uns!",
      subtitle: "Der authentische Geschmack des Trentino ist näher als Sie denken. Entdecken Sie die Bottamedi-Qualität an unserem Marktstand oder kontaktieren Sie Pierluigi für HORECA-Anforderungen. Unsere Familie freut sich auf Sie!",
      banchettoTitle: "Marktstand: Das Herz der Frische",
      banchettoAddress: "Via Cavalleggeri Udine, 38017 Mezzolombardo (TN)",
      banchettoPhone: "Marktstand: 351 577 6198",
      banchettoHours: "Öffnungszeiten: Montag - Samstag: 07:00 – 19:30",
      ingrossoTitle: "Großhandel HORECA: Qualität für Profis",
      ingrossoAddress: "Lager: Via Alcide de Gasperi, 47, 38017 Mezzolombardo (TN)",
      ingrossoPhone: "Großhandel HORECA: 0461 602534",
      ingrossoEmail: "bottamedipierluigi@virgilio.it",
      mapTitle: "Unsere Wurzeln, nur einen Klick entfernt",
      mapBanchettoCta: "Karte Marktstand",
      mapIngrossoCta: "Karte Großhandel",
    },
    footer: {
      proprietor: "Obst und Gemüse von Pierluigi Bottamedi.",
      rights: "Alle Rechte vorbehalten.",
      banchettoTitle: "Marktstand (Detail)",
      banchettoAddress: "Via Cavalleggeri Udine, Mezzolombardo (TN)",
      banchettoPhone: "Tel: 351 577 6198",
      ingrossoTitle: "Großhandel (HORECA)",
      ingrossoAddress: "Via A. de Gasperi, 47, Mezzolombardo (TN)",
      ingrossoPhone: "Tel: 0461 602534",
      contactUs: "Kontaktieren Sie uns",
      credits: "Webseite mit Leidenschaft erstellt.",
    },
     langCookieModal: {
      title: "Willkommen! / Benvenuto!",
      languageSelectLabel: "Bitte wählen Sie Ihre Sprache / Seleziona la tua lingua:",
      italian: "Italiano",
      german: "Deutsch",
      cookieMessage: "Wir verwenden Cookies, um Ihnen das beste Erlebnis auf unserer Website zu gewährleisten und Ihre Sprachpräferenz zu speichern. Indem Sie auf 'Akzeptieren' klicken, stimmen Sie deren Verwendung zu.",
      cookieMessageDE: "Utilizziamo i cookie per assicurarti la migliore esperienza sul nostro sito e per ricordare la tua preferenza linguistica. Cliccando 'Accetta', acconsenti al loro utilizzo.",
      acceptButton: "Akzeptieren / Accetta",
    }
  },
};
========================================
Content of: src/types.ts
========================================
export interface NavLink {
  id: string;
  label: string;
  href?: string; // Optional if id is used for scrolling
}

export interface GalleryItemData {
  id: string;
  src: string;
  thumb: string;
  alt: string;
  caption: string;
  title: string;
}

export interface TimelineEvent {
  period: string;
  title: string;
  description: string;
  imageSrc: string;
  imageAlt: string;
}

export interface FeatureItem {
  icon: React.ElementType;
  title: string;
  description: string;
  imageSrc: string;
  alt?: string; // Added alt text for the image
}
========================================
Content of: src/components/ui/Lightbox.tsx
========================================
import React, { useEffect, useRef } from 'react';
import { GalleryItemData } from '../../types';
import { XIcon } from '../icons/HeroIcons';
import { gsap } from 'gsap';

interface LightboxProps {
  item: GalleryItemData;
  onClose: () => void;
}

const Lightbox: React.FC<LightboxProps> = ({ item, onClose }) => {
  const lightboxRef = useRef<HTMLDivElement>(null);
  const contentRef = useRef<HTMLDivElement>(null);
  const closeButtonRef = useRef<HTMLButtonElement>(null);

  useEffect(() => {
    const currentLightboxRef = lightboxRef.current;
    if (!currentLightboxRef) return;

    const gsapCtx = gsap.context(() => {
      gsap.set(currentLightboxRef, { autoAlpha: 0 });
      gsap.to(currentLightboxRef, { autoAlpha: 1, duration: 0.3, ease: 'power2.out' });
      gsap.from(contentRef.current, { scale: 0.9, y: 20, duration: 0.4, ease: 'expo.out', delay: 0.1 });
      
      closeButtonRef.current?.focus(); // Set initial focus
    }, currentLightboxRef);

    const handleEsc = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        onClose();
      }
    };

    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === 'Tab' && contentRef.current) {
        const focusableElements = Array.from(
          contentRef.current.querySelectorAll<HTMLElement>('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])')
        ).filter(el => el.offsetParent !== null); // Filter for visible elements

        if (focusableElements.length === 0) return;

        const firstElement = focusableElements[0];
        const lastElement = focusableElements[focusableElements.length - 1];

        if (event.shiftKey) { // Shift + Tab
          if (document.activeElement === firstElement) {
            lastElement.focus();
            event.preventDefault();
          }
        } else { // Tab
          if (document.activeElement === lastElement) {
            firstElement.focus();
            event.preventDefault();
          }
        }
      }
    };
    
    window.addEventListener('keydown', handleEsc);
    currentLightboxRef.addEventListener('keydown', handleKeyDown); // Attach to lightbox div for trapping
    document.body.style.overflow = 'hidden';

    return () => {
      gsapCtx.revert();
      window.removeEventListener('keydown', handleEsc);
      currentLightboxRef?.removeEventListener('keydown', handleKeyDown);
      document.body.style.overflow = 'auto';
    };
  }, [onClose]);

  const handleCloseAnimation = () => {
    if (lightboxRef.current) {
      gsap.to(lightboxRef.current, { 
        autoAlpha: 0, 
        duration: 0.2, 
        ease: 'power1.in',
        onComplete: onClose 
      });
    } else {
      onClose();
    }
  };

  return (
    <div 
      ref={lightboxRef}
      className="fixed inset-0 bg-black bg-opacity-80 backdrop-blur-sm z-[100] flex items-center justify-center p-4"
      onClick={handleCloseAnimation}
      role="dialog"
      aria-modal="true"
      aria-labelledby="lightbox-title" 
    >
      <div 
        ref={contentRef}
        className="bg-white p-4 rounded-lg shadow-2xl max-w-3xl max-h-[90vh] relative overflow-auto"
        onClick={(e) => e.stopPropagation()} 
      >
        <button
          ref={closeButtonRef}
          onClick={handleCloseAnimation}
          className="absolute top-3 right-3 text-gray-600 hover:text-gray-900 z-10 bg-white bg-opacity-50 rounded-full p-1 focus:outline-none focus:ring-2 focus:ring-brand-green"
          aria-label="Close lightbox"
        >
          <XIcon className="h-6 w-6" />
        </button>
        <img 
          src={item.src} 
          alt={item.alt} 
          className="w-full h-auto max-h-[75vh] object-contain rounded-md" 
          width={item.src.includes('map') ? 800 : 1200} 
          height={item.src.includes('map') ? 400 : 900}
        />
        {item.caption && <p id="lightbox-title" className="mt-3 text-center text-gray-700">{item.caption}</p>}
      </div>
    </div>
  );
};

export default Lightbox;
========================================
Content of: src/components/layout/Footer.tsx
========================================
import React from 'react';
import { PhoneIcon, MailIcon, MapPinIcon } from '../icons/HeroIcons';
import { useLanguage } from '../../contexts/LanguageContext';

const FacebookIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg {...props} fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
    <path fillRule="evenodd" d="M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z" clipRule="evenodd" />
  </svg>
);

const InstagramIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg {...props} fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
    <path d="M12 2.163c3.204 0 3.584.012 4.85.07 1.264.058 2.147.248 2.91.558.796.326 1.456.796 2.123 1.463.666.666 1.136 1.326 1.462 2.122.31.764.5 1.647.558 2.91.058 1.266.07 1.646.07 4.85s-.012 3.584-.07 4.85c-.058 1.264-.248 2.147-.558 2.91-.326.796-.796 1.456-1.462 2.123-.667.666-1.326 1.136-2.123 1.462-.764.31-1.646.5-2.91.558-1.266.058-1.646.07-4.85.07s-3.584-.012-4.85-.07c-1.264-.058-2.147-.248-2.91-.558-.796-.326-1.456-.796-2.123-1.462-.666-.667-1.136-1.326-1.462-2.123-.31-.764-.5-1.646-.558-2.91-.058-1.266-.07-1.646-.07-4.85s.012-3.584.07-4.85c.058-1.264.248 2.147.558 2.91.326-.796.796 1.456 1.462-2.123.667-.666 1.326-1.136 2.123-1.462.764-.31 1.646.5 2.91-.558C8.416 2.175 8.796 2.163 12 2.163m0-2.163C8.74 0 8.31 0 7.053.057c-1.45.066-2.572.29-3.503.652C2.592 1.085 1.78 1.617.965 2.432.15 3.246-.383 4.058-.745 5.01c-.363.93-.586 2.052-.652 3.502C-.057 9.97 0 10.397 0 12s0 2.03.057 3.287c.066 1.45.29 2.572.652 3.503.362.952.895 1.765 1.71 2.579s1.625.847 2.579 1.71c.93.363 2.052.586 3.502.652C9.97 23.943 10.397 24 12 24s2.03-.057 3.287-.066c1.45-.066 2.572-.29 3.503-.652.952-.362 1.765-.895 2.579-1.71s.847-1.625 1.71-2.579c.363-.93.586-2.052.652-3.503.057-1.257.066-1.684.066-3.287s0-2.03-.066-3.287c-.066-1.45-.29-2.572-.652-3.503-.362-.952-.895-1.765-1.71-2.579S20.754.915 19.8.057C18.87.308 17.748.066 16.298 0 14.03 0 13.603 0 12 0zm0 5.838a6.162 6.162 0 100 12.324 6.162 6.162 0 000-12.324zm0 10.162a4 4 0 110-8 4 4 0 010 8zm6.406-11.845a1.44 1.44 0 100 2.88 1.44 1.44 0 000-2.88z"/>
  </svg>
);


const Footer: React.FC = () => {
  const currentYear = new Date().getFullYear();
  const { t } = useLanguage();

  return (
    <footer className="bg-brand-gray-dark text-gray-400 py-12 md:py-16">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-8">
            <h3 className="font-display text-4xl text-white mb-2 tracking-wider">
            BOTTAMEDI
            </h3>
            <p className="text-sm">
            {t('footer.proprietor', 'Frutta e Verdura di Pierluigi Bottamedi.')} 
            </p>
            <p className="text-xs mt-1">
            &copy; {currentYear} {t('footer.rights', 'Tutti i diritti riservati.')} | P.IVA 02273530226
            </p>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-10 text-sm text-center md:text-left">
          <div>
            <h4 className="font-semibold text-gray-200 mb-2 uppercase tracking-wider text-base">{t('footer.banchettoTitle', 'Banchetto (Dettaglio)')}</h4>
            <p className="flex items-center justify-center md:justify-start mb-1">
              <MapPinIcon className="h-4 w-4 mr-2 text-brand-green-light flex-shrink-0" />
              {t('footer.banchettoAddress', 'Via Cavalleggeri Udine, Mezzolombardo (TN)')}
            </p>
            <a href="tel:+393515776198" className="hover:text-brand-green-light flex items-center justify-center md:justify-start">
              <PhoneIcon className="h-4 w-4 mr-2 text-brand-green-light flex-shrink-0" />
              {t('footer.banchettoPhone', 'Tel: 351 577 6198')}
            </a>
          </div>
          
          <div>
            <h4 className="font-semibold text-gray-200 mb-2 uppercase tracking-wider text-base">{t('footer.ingrossoTitle', 'Ingrosso (HORECA)')}</h4>
            <p className="flex items-center justify-center md:justify-start mb-1">
              <MapPinIcon className="h-4 w-4 mr-2 text-brand-green-light flex-shrink-0" />
              {t('footer.ingrossoAddress', 'Via A. de Gasperi, 47, Mezzolombardo (TN)')}
            </p>
            <a href="tel:+390461602534" className="hover:text-brand-green-light flex items-center justify-center md:justify-start">
              <PhoneIcon className="h-4 w-4 mr-2 text-brand-green-light flex-shrink-0" />
              {t('footer.ingrossoPhone', 'Tel: 0461 602534')}
            </a>
          </div>

          <div>
            <h4 className="font-semibold text-gray-200 mb-2 uppercase tracking-wider text-base">{t('footer.contactUs', 'Contattaci')}</h4>
            <a href="mailto:info@bottamedi.it" className="hover:text-brand-green-light flex items-center justify-center md:justify-start mb-2">
              <MailIcon className="h-4 w-4 mr-2 text-brand-green-light flex-shrink-0" />
              info@bottamedi.it
            </a>
            <div className="flex justify-center md:justify-start space-x-5">
              <a href="https://www.facebook.com/profile.php?id=100063456281899" target="_blank" rel="noopener noreferrer" aria-label="Facebook" className="text-gray-400 hover:text-brand-green-light transition-colors">
                <FacebookIcon className="h-5 w-5" />
              </a>
              <a href="https://instagram.com/banchetto.bottamedi" target="_blank" rel="noopener noreferrer" aria-label="Instagram" className="text-gray-400 hover:text-brand-green-light transition-colors">
                <InstagramIcon className="h-5 w-5" />
              </a>
            </div>
          </div>
        </div>
        <p className="text-xs text-gray-500 text-center border-t border-gray-700 pt-6 mt-6">
          {t('footer.credits', 'Sito web realizzato con passione.')}
        </p>
      </div>
    </footer>
  );
};

export default Footer;
========================================
Content of: src/components/layout/Header.tsx
========================================
import React, { useState, useEffect, useRef } from 'react';
import { NavLink } from '../../types';
import { gsap } from 'gsap';
import { useLanguage } from '../../contexts/LanguageContext';

interface HeaderProps {
  navLinks: NavLink[];
}

const Header: React.FC<HeaderProps> = ({ navLinks }) => {
  const headerRef = useRef<HTMLElement>(null);
  const { t } = useLanguage();
  const [isScrolled, setIsScrolled] = useState(false);
  const lastScrollY = useRef(0);
  const headerHeight = useRef(0); 
  const isHidden = useRef(false); 

  useEffect(() => {
    const headerElement = headerRef.current;
    if (!headerElement) return;

    const gsapCtx = gsap.context(() => {
      let resizeTimeout: ReturnType<typeof setTimeout>;
      const updateHeaderHeight = () => {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(() => {
          if (headerRef.current) {
            headerHeight.current = headerRef.current.offsetHeight;
          }
        }, 100);
      };

      gsap.delayedCall(0.1, updateHeaderHeight);
      
      const handleScroll = () => {
        const currentScrollY = window.scrollY;
        const localHeaderHeight = headerHeight.current || (headerRef.current?.offsetHeight ?? 70); 

        setIsScrolled(currentScrollY > 50);

        if (currentScrollY < localHeaderHeight * 0.5) { 
          if (isHidden.current) {
            gsap.to(headerElement, { y: '0%', duration: 0.3, ease: 'power2.out', overwrite: true });
            isHidden.current = false;
          }
        } else if (currentScrollY > lastScrollY.current && currentScrollY > localHeaderHeight) { 
          if (!isHidden.current) {
            gsap.to(headerElement, { y: '-100%', duration: 0.4, ease: 'power2.inOut', overwrite: true });
            isHidden.current = true;
          }
        } else if (currentScrollY < lastScrollY.current) { 
          if (isHidden.current) {
            gsap.to(headerElement, { y: '0%', duration: 0.4, ease: 'power2.out', overwrite: true });
            isHidden.current = false;
          }
        }
        lastScrollY.current = currentScrollY;
      };

      window.addEventListener('scroll', handleScroll, { passive: true });
      window.addEventListener('resize', updateHeaderHeight, { passive: true });
      
      if (window.scrollY <= 50) {
          gsap.set(headerElement, { y: '0%' });
          isHidden.current = false;
      }
      return () => {
        window.removeEventListener('scroll', handleScroll);
        window.removeEventListener('resize', updateHeaderHeight);
        clearTimeout(resizeTimeout);
      };
    }, headerElement); 

    return () => gsapCtx.revert();
  }, []);

  const scrollToSection = (sectionId: string) => {
    let offsetY = 70; 
    if (headerRef.current) {
        const headerVisibleHeight = isHidden.current ? 0 : (headerHeight.current || headerRef.current.offsetHeight);
        offsetY = headerVisibleHeight > 0 ? headerVisibleHeight + (isScrolled ? 10 : 20) : (isScrolled ? 30 : 50) ;
    }
    gsap.to(window, { duration: 1.2, scrollTo: { y: `#${sectionId}`, offsetY: offsetY }, ease: 'power3.inOut' });
  };

  return (
    <header
      ref={headerRef}
      className={`fixed top-0 left-0 right-0 z-50 transition-all duration-300 ease-in-out 
                  ${isScrolled ? 'bg-white shadow-lg py-3' : 'bg-transparent py-5 md:py-6'}`}
    >
      <div className="container mx-auto px-4 sm:px-6 lg:px-8 flex justify-between items-center">
        <a href="#hero" onClick={(e) => { e.preventDefault(); scrollToSection('hero'); }} className="block transform transition-transform duration-300 hover:scale-105">
          <img 
            src="/images/bottamedi_logo_solofrutta_glow.jpg" 
            alt={t('header.logoAlt', 'Bottamedi Frutta e Verdura Logo')}
            width={isScrolled ? 130 : 150} 
            height={isScrolled ? 40 : 56}  
            className={`transition-all duration-300 ${isScrolled ? 'h-10' : 'h-12 md:h-14'}`} 
            style={{ filter: isScrolled ? 'none' : 'brightness(1.1) drop-shadow(0 2px 4px rgba(0,0,0,0.3))' }}
          />
        </a>
        <nav className="hidden md:flex space-x-5 lg:space-x-7">
          {navLinks.map((link) => (
            <a
              key={link.id}
              href={`#${link.id}`}
              onClick={(e) => { e.preventDefault(); scrollToSection(link.id); }}
              className={`relative group hover:text-brand-green transition-colors text-base font-medium 
                          ${isScrolled ? 'text-brand-gray-dark' : 'text-gray-100 hover:text-brand-green-light'}`}
            >
              {link.label}
              <span className={`absolute bottom-[-5px] left-0 w-full h-[3px] bg-brand-green origin-left transform scale-x-0 
                               transition-transform duration-300 ease-out group-hover:scale-x-100 
                               ${isScrolled ? 'bg-brand-green' : 'bg-brand-green-light'}`}></span>
            </a>
          ))}
        </nav>
      </div>
    </header>
  );
};

export default Header;
========================================
Content of: src/components/sections/ContactSection.tsx
========================================
import React, {useEffect, useRef} from 'react';
import Section from '../ui/Section';
import { PhoneIcon, MailIcon, MapPinIcon, ExternalLinkIcon } from '../icons/HeroIcons';
import { useLanguage } from '../../contexts/LanguageContext';
import { gsap } from 'gsap';

const ContactSection: React.FC = () => {
  const sectionRef = useRef<HTMLElement>(null);
  const titleRef = useRef<HTMLHeadingElement>(null);
  const subtitleRef = useRef<HTMLParagraphElement>(null);
  const contactBlocksRef = useRef<(HTMLDivElement | null)[]>([]);
  const mapPreviewsRef = useRef<(HTMLDivElement | null)[]>([]);
  const { t } = useLanguage();

  useEffect(() => {
    const currentSectionRef = sectionRef.current;
    if (!currentSectionRef || !titleRef.current || !subtitleRef.current) return;

    const gsapCtx = gsap.context(() => {
      const tl = gsap.timeline({
        scrollTrigger: {
          trigger: currentSectionRef,
          start: "top 70%",
          toggleActions: "play none none none"
        }
      });
      
      gsap.set([titleRef.current, subtitleRef.current], {autoAlpha:0});
      tl.from([titleRef.current, subtitleRef.current], {
        autoAlpha: 0, y: 40, stagger: 0.2, duration: 0.9, ease: 'power3.out'
      });

      contactBlocksRef.current.forEach((block, index) => {
        if(block) {
          gsap.set(block, {autoAlpha:0});
          gsap.from(block, {
            autoAlpha: 0, x: -60, duration: 0.8, ease: 'expo.out', delay: index * 0.1,
            scrollTrigger: { trigger: block, start: "top 85%", toggleActions: "play none none none" }
          });
        }
      });
      
      mapPreviewsRef.current.forEach((map, index) => {
        if(map) {
          gsap.set(map, {autoAlpha:0});
          gsap.from(map, {
            autoAlpha: 0, scale: 0.85, rotationY: 15, duration: 0.9, ease: 'back.out(1.6)', delay: index * 0.1,
            scrollTrigger: { trigger: map, start: "top 85%", toggleActions: "play none none none" }
          });
        }
      });
    }, currentSectionRef); 

    return () => gsapCtx.revert(); 
  }, [t]); 

  return (
    <Section id="contatti" ref={sectionRef} aria-labelledby="contatti-title" className="bg-white">
      <div className="text-center mb-12 md:mb-16">
        <h2 ref={titleRef} id="contatti-title" className="text-3xl md:text-4xl lg:text-5xl font-bold font-serif text-brand-green-dark mb-4">
         {t('contact.title', 'Restiamo in Contatto: Trovaci, Chiamaci, Scrivici!')}
        </h2>
        <p ref={subtitleRef} className="text-lg md:text-xl text-brand-gray-dark max-w-3xl mx-auto leading-relaxed">
          {t('contact.subtitle', 'Il sapore autentico del Trentino è più vicino di quanto pensi. Vieni a scoprire la qualità Bottamedi al nostro Banchetto, o contatta Pierluigi per le esigenze HORECA. La nostra famiglia è pronta ad accoglierti!')}
        </p>
      </div>

      <div className="grid md:grid-cols-2 gap-8 lg:gap-12 items-start">
        <div className="space-y-8">
          <div ref={el => { contactBlocksRef.current[0] = el; }} className="bg-brand-gray-extralight p-6 md:p-8 rounded-xl shadow-lg hover:shadow-brand-green/15 transition-shadow duration-300 hover:-translate-y-1 transform">
            <h3 className="text-2xl font-serif font-semibold text-brand-green-dark mb-4">{t('contact.banchettoTitle', 'Banchetto: Il Cuore della Freschezza')}</h3>
            <address className="not-italic space-y-3 text-brand-gray-dark">
              <p className="flex items-start">
                <MapPinIcon className="h-5 w-5 text-brand-orange mr-3 mt-1 flex-shrink-0" />
                <span>{t('contact.banchettoAddress', 'Via Cavalleggeri Udine, 38017 Mezzolombardo (TN)')}</span>
              </p>
              <p className="flex items-center">
                <PhoneIcon className="h-5 w-5 text-brand-orange mr-3 flex-shrink-0" />
                <a href="tel:+393515776198" className="hover:text-brand-green transition-colors">{t('contact.banchettoPhone', 'Banchetto: 351 577 6198')}</a>
              </p>
              <p className="text-sm"><strong className="font-medium">{t('contact.banchettoHours', 'Orari:')}</strong> Lunedì - Sabato: 07:00 – 19:30</p>
            </address>
          </div>

          <div ref={el => { contactBlocksRef.current[1] = el; }} className="bg-brand-gray-extralight p-6 md:p-8 rounded-xl shadow-lg hover:shadow-brand-green/15 transition-shadow duration-300 hover:-translate-y-1 transform">
            <h3 className="text-2xl font-serif font-semibold text-brand-green-dark mb-4">{t('contact.ingrossoTitle', 'Ingrosso HORECA: Qualità per Professionisti')}</h3>
            <address className="not-italic space-y-3 text-brand-gray-dark">
              <p className="flex items-start">
                <MapPinIcon className="h-5 w-5 text-brand-orange mr-3 mt-1 flex-shrink-0" />
                <span>{t('contact.ingrossoAddress', 'Magazzino: Via Alcide de Gasperi, 47, 38017 Mezzolombardo (TN)')}</span>
              </p>
              <p className="flex items-center">
                <PhoneIcon className="h-5 w-5 text-brand-orange mr-3 flex-shrink-0" />
                <a href="tel:+390461602534" className="hover:text-brand-green transition-colors">{t('contact.ingrossoPhone', 'Ingrosso HORECA: 0461 602534')}</a>
              </p>
              <p className="flex items-center">
                <MailIcon className="h-5 w-5 text-brand-orange mr-3 flex-shrink-0" />
                <a href="mailto:bottamedipierluigi@virgilio.it" className="hover:text-brand-green break-all transition-colors">{t('contact.ingrossoEmail', 'bottamedipierluigi@virgilio.it')}</a>
              </p>
            </address>
          </div>
        </div>

        <div className="space-y-8">
          <h3 className="text-2xl font-serif font-semibold text-brand-gray-dark text-center md:text-left">{t('contact.mapTitle', 'Le Nostre Radici, a Portata di Click')}</h3>
          
          <div ref={el => { mapPreviewsRef.current[0] = el; }} className="bg-white p-4 rounded-xl shadow-lg hover:shadow-2xl transition-all duration-300 hover:scale-105 transform">
            <a href="https://www.google.com/maps/search/?api=1&query=Banchetto+Frutta+e+Verdura+Bottamedi+Via+Cavalleggeri+Udine+Mezzolombardo+TN" target="_blank" rel="noopener noreferrer" className="group block">
              <div className="overflow-hidden rounded-lg mb-3">
                <img src="/images/map_banchetto.png" alt={t('contact.mapBanchettoCta', 'Mappa Banchetto')} 
                     width="500" height="256" 
                     className="w-full h-64 object-cover border transform group-hover:scale-110 transition-transform duration-400 ease-out"/>
              </div>
              <h4 className="text-lg font-semibold text-brand-green-dark mb-1 group-hover:text-brand-orange transition-colors">{t('contact.banchettoTitle', 'Il Banchetto (Dettaglio)')}</h4>
              <p className="text-sm text-brand-gray-dark flex items-center group-hover:text-brand-orange transition-colors">
                {t('global.viewOnMap', 'Visualizza su Google Maps')} <ExternalLinkIcon className="h-4 w-4 ml-1.5"/>
              </p>
            </a>
          </div>
          
           <div ref={el => { mapPreviewsRef.current[1] = el; }} className="bg-white p-4 rounded-xl shadow-lg hover:shadow-2xl transition-all duration-300 hover:scale-105 transform">
            <a href="https://www.google.com/maps/search/?api=1&query=Bottamedi+Ingrosso+Ortofrutta+Via+Alcide+de+Gasperi+47+Mezzolombardo" target="_blank" rel="noopener noreferrer" className="group block">
              <div className="overflow-hidden rounded-lg mb-3">
                <img src="/images/map_ingrosso.png" alt={t('contact.mapIngrossoCta', 'Mappa Ingrosso')} 
                     width="500" height="256" 
                     className="w-full h-64 object-cover border transform group-hover:scale-110 transition-transform duration-400 ease-out"/>
              </div>
              <h4 className="text-lg font-semibold text-brand-green-dark mb-1 group-hover:text-brand-orange transition-colors">{t('contact.ingrossoTitle', 'L\'Ingrosso (HORECA)')}</h4>
              <p className="text-sm text-brand-gray-dark flex items-center group-hover:text-brand-orange transition-colors">
                 {t('global.viewOnMap', 'Visualizza su Google Maps')} <ExternalLinkIcon className="h-4 w-4 ml-1.5"/>
              </p>
            </a>
          </div>
        </div>
      </div>
    </Section>
  );
};

export default ContactSection;
========================================
Content of: src/components/sections/IntroSection.tsx
========================================
import React, { useEffect, useRef } from 'react';
import Section from '../ui/Section';
import { gsap } from 'gsap';
import { SplitText } from 'gsap/SplitText';
import { useLanguage } from '../../contexts/LanguageContext';

const IntroSection: React.FC = () => {
  const sectionRef = useRef<HTMLElement>(null);
  const titleRef = useRef<HTMLHeadingElement>(null);
  const paragraphRef = useRef<HTMLParagraphElement>(null);
  const { t } = useLanguage();

  useEffect(() => {
    const currentSectionRef = sectionRef.current;
    if (!titleRef.current || !paragraphRef.current || !currentSectionRef) return;

    const gsapCtx = gsap.context(() => {
      const tl = gsap.timeline({
        scrollTrigger: {
          trigger: currentSectionRef,
          start: "top 75%", 
          toggleActions: "play none none none", 
        }
      });

      let titleSplit: SplitText | null = null;
      if (titleRef.current && titleRef.current.innerText.trim() !== "") {
        titleSplit = new SplitText(titleRef.current, { type: 'words,chars' });
        gsap.set(titleSplit.chars, {autoAlpha:0}); 
        tl.from(titleSplit.chars, {
          autoAlpha: 0, yPercent: 50, scale: 0.8, rotationX: -45,
          skewX: gsap.utils.wrap([-10, 10]), duration: 0.8,
          stagger: { each: 0.03, from: "random" },
          ease: 'expo.out'
        });
      }

      let paragraphSplit: SplitText | null = null;
      if (paragraphRef.current && paragraphRef.current.innerText.trim() !== "") {
        paragraphSplit = new SplitText(paragraphRef.current, { type: 'lines' });
        gsap.set(paragraphSplit.lines, {autoAlpha:0});
        tl.from(paragraphSplit.lines, {
          autoAlpha: 0, y: 30, rotationX: -10, duration: 0.7,
          stagger: 0.12, ease: 'power2.out'
        }, "-=0.5");
      }
      
      return () => {
        if (titleSplit?.revert) titleSplit.revert();
        if (paragraphSplit?.revert) paragraphSplit.revert();
      }
    }, currentSectionRef); 

    return () => gsapCtx.revert(); 
  }, [t]); 

  const annoNonno = t('intro.annoNonno', '[ANNO NONNO]'); 
  const nomeNonno = t('intro.nomeNonno', '[NOME NONNO]');

  return (
    <Section id="intro" ref={sectionRef} aria-labelledby="intro-title" className="bg-brand-gray-extralight">
      <div className="text-center">
        <h2 ref={titleRef} id="intro-title" className="text-3xl md:text-4xl lg:text-5xl font-bold font-serif text-brand-green-dark mb-8 leading-tight">
          {t('intro.title', 'Bottamedi: Dove la Natura Incontra la Passione da Tre Generazioni.')}
        </h2>
        <p ref={paragraphRef} className="text-lg md:text-xl text-brand-gray-dark max-w-3xl mx-auto leading-relaxed">
          {t('intro.paragraph1', `Un viaggio iniziato nel cuore del Trentino nel ${annoNonno}, quando nonno ${nomeNonno} piantò il primo seme di una visione: portare sulla vostra tavola non solo frutta e verdura, ma l'essenza stessa della nostra terra. `).replace('{{annoNonno}}', annoNonno).replace('{{nomeNonno}}', nomeNonno)}
          {t('intro.paragraph2', 'Oggi, quella visione fiorisce nel nostro vivace Banchetto a Mezzolombardo e nel servizio HORECA dedicato, testimoni di una freschezza che si tocca e di una qualità che si assapora, giorno dopo giorno.')}
        </p>
      </div>
    </Section>
  );
};

export default IntroSection;
========================================
Content of: src/components/sections/RetailSection.tsx
========================================
import React, { useState, useEffect, useRef } from 'react';
import Section from '../ui/Section';
import Gallery from '../ui/Gallery';
import Lightbox from '../ui/Lightbox';
import Button from '../ui/Button';
import { GalleryItemData } from '../../types';
import { gsap } from 'gsap';
import { useLanguage } from '../../contexts/LanguageContext';

interface RetailGalleryItem {
  id: string;
  src: string;
  thumb: string;
  altKey: string;
  defaultAlt: string;
  captionKey: string;
  defaultCaption: string;
  titleKey: string;
  defaultTitle: string;
}

const retailGalleryItemsData: RetailGalleryItem[] = [
  { id: '1', src: '/images/agrumi_datteri_castagne.jpg', thumb: '/images/agrumi_datteri_castagne.jpg', altKey: 'gallery.alt.stagione', defaultAlt: 'Frutta fresca di stagione al banchetto', captionKey: 'gallery.caption.stagione', defaultCaption: 'Un arcobaleno di freschezza: frutta di stagione, verdure locali e delizie tipiche ti aspettano al nostro Banchetto.', titleKey: 'gallery.title.stagione', defaultTitle: 'Tesori di Stagione' },
  { id: '2', src: '/images/pomodori_cuore_bue.jpg', thumb: '/images/pomodori_cuore_bue.jpg', altKey: 'gallery.alt.pomodori', defaultAlt: 'Pomodori cuore di bue rossi e maturi', captionKey: 'gallery.caption.pomodori', defaultCaption: 'Il vero sapore dell\'orto: pomodori cuore di bue coltivati con passione, per sughi e insalate indimenticabili.', titleKey: 'gallery.title.pomodori', defaultTitle: 'Rosso Passione' },
  { id: '3', src: '/images/melinda_golden.jpg', thumb: '/images/melinda_golden.jpg', altKey: 'gallery.alt.melinda', defaultAlt: 'Mele Golden Melinda del Trentino', captionKey: 'gallery.caption.melinda', defaultCaption: 'L\'oro del Trentino: le inconfondibili Mele Golden Melinda, un classico di dolcezza e croccantezza.', titleKey: 'gallery.title.melinda', defaultTitle: 'Golden Melinda DOC' },
  { id: '4', src: '/images/angurie.jpg', thumb: '/images/angurie.jpg', altKey: 'gallery.alt.angurie', defaultAlt: 'Angurie fresche e succose', captionKey: 'gallery.caption.angurie', defaultCaption: 'Un\'esplosione di freschezza estiva: le nostre angurie, dolci e dissetanti, perfette per ogni momento.', titleKey: 'gallery.title.angurie', defaultTitle: 'Regine dell\'Estate' },
  { id: '5', src: '/images/meloni_sattin.jpg', thumb: '/images/meloni_sattin.jpg', altKey: 'gallery.alt.meloni', defaultAlt: 'Meloni Sattin dolci e profumati', captionKey: 'gallery.caption.meloni', defaultCaption: 'Meloni Sattin "Dolce Passione": un profumo avvolgente e una dolcezza che conquista, coltivati con amore.', titleKey: 'gallery.title.meloni', defaultTitle: 'Meloni Sublimi' },
  { id: '6', src: '/images/frutta_disidratata_display.jpg', thumb: '/images/frutta_disidratata_dettaglio.jpg', altKey: 'gallery.alt.disidratata', defaultAlt: 'Selezione di frutta disidratata e secca', captionKey: 'gallery.caption.disidratata', defaultCaption: 'Oltre il fresco: scopri un mondo di sapori concentrati nella nostra selezione di frutta disidratata e specialità secche.', titleKey: 'gallery.title.disidratata', defaultTitle: 'Gioielli Essiccati' },
];


const RetailSection: React.FC = () => {
  const [lightboxOpen, setLightboxOpen] = useState(false);
  const [currentImage, setCurrentImage] = useState<GalleryItemData | null>(null);
  const sectionRef = useRef<HTMLElement>(null);
  const titleRef = useRef<HTMLHeadingElement>(null);
  const paragraphRef = useRef<HTMLParagraphElement>(null);
  const mainImageRef = useRef<HTMLImageElement>(null);
  const ctaButtonRef = useRef<HTMLDivElement>(null);
  const { t } = useLanguage();

  const galleryItems: GalleryItemData[] = retailGalleryItemsData.map(item => ({
    id: item.id,
    src: item.src,
    thumb: item.thumb,
    title: t(item.titleKey, item.defaultTitle),
    caption: t(item.captionKey, item.defaultCaption),
    alt: t(item.altKey, item.defaultAlt),
  }));

  const openLightbox = (item: GalleryItemData) => {
    setCurrentImage(item);
    setLightboxOpen(true);
  };

  const closeLightbox = () => {
    setLightboxOpen(false);
    setCurrentImage(null);
  };

  const scrollToSection = (sectionId: string) => {
     gsap.to(window, { duration: 1.2, scrollTo: { y: `#${sectionId}`, offsetY: 70 }, ease: 'power3.inOut' });
  };
  
  useEffect(() => {
    const currentSectionRef = sectionRef.current;
    if (!currentSectionRef || !titleRef.current || !paragraphRef.current || !mainImageRef.current || !ctaButtonRef.current) return;
    
    const gsapCtx = gsap.context(() => {
      const tl = gsap.timeline({
          scrollTrigger: {
              trigger: currentSectionRef,
              start: "top 70%", 
              toggleActions: "play none none none"
          }
      });

      tl.from(mainImageRef.current, { autoAlpha:0, scale:0.9, y:30, duration: 1, ease: 'expo.out'})
        .from(titleRef.current, { autoAlpha: 0, y: 25, duration: 0.8, ease: 'power2.out' }, "-=0.7")
        .from(paragraphRef.current, { autoAlpha: 0, y: 20, duration: 0.7, ease: 'power2.out' }, "-=0.6")
        .from(ctaButtonRef.current, { autoAlpha: 0, y: 20, scale:0.9, duration: 0.6, ease: 'back.out(1.7)' }, "-=0.4");
    }, currentSectionRef); 

    return () => gsapCtx.revert();
  }, [t]); 

  return (
    <Section id="dettaglio" ref={sectionRef} aria-labelledby="dettaglio-title" className="bg-brand-gray-extralight">
      <div className="text-center">
        <img 
          ref={mainImageRef} 
          src="/images/zucche_decorate.jpg" 
          alt={t('retail.mainImageAlt', 'Il colorato ed accogliente banchetto di Bottamedi Frutta e Verdura a Mezzolombardo')} 
          width={1024} 
          height={682} 
          className="w-full max-w-4xl mx-auto rounded-xl shadow-2xl mb-8 md:mb-10 h-64 md:h-96 lg:h-[500px] object-cover"/>
        <h2 ref={titleRef} id="dettaglio-title" className="text-3xl md:text-4xl lg:text-5xl font-bold font-serif text-brand-green-dark mb-4">
          {t('retail.title', 'L\'Eden del Gusto Quotidiano: Il Nostro Banchetto')}
        </h2>
        <p ref={paragraphRef} className="text-lg md:text-xl text-brand-gray-dark max-w-3xl mx-auto mb-10 md:mb-12 leading-relaxed">
          {t('retail.description', 'Immergiti in un\'esplosione di colori e profumi al nostro storico Banchetto in Via Cavalleggeri Udine, Mezzolombardo. Ogni giorno, selezioniamo per te solo il meglio: frutta succosa, verdure croccanti e specialità locali, presentate con la passione e la cura che ci definiscono da generazioni.')}
        </p>
      </div>
      <Gallery items={galleryItems} onItemClick={openLightbox} />
      {lightboxOpen && currentImage && (
        <Lightbox item={currentImage} onClose={closeLightbox} />
      )}
      <div ref={ctaButtonRef} className="text-center mt-12 md:mt-16">
        <Button onClick={() => scrollToSection('contatti')} variant="secondary" size="lg" className="shadow-md hover:shadow-lg">
            {t('retail.cta', 'Orari e Contatti del Banchetto')}
        </Button>
      </div>
    </Section>
  );
};

export default RetailSection;
========================================
Content of: src/components/sections/StorySection.tsx
========================================
import React, { useEffect, useRef } from 'react';
import Section from '../ui/Section';
import { TimelineEvent } from '../../types';
import { gsap } from 'gsap';
import { useLanguage } from '../../contexts/LanguageContext';

interface TimelineEventDataItem {
  imageSrc: string; 
  periodKey: string;
  defaultPeriod: string;
  titleKey: string;
  defaultTitle: string;
  descriptionKey: string;
  defaultDescription: string;
  imageAltKey: string;
  defaultImageAlt: string;
}

const StorySection: React.FC = () => {
  const sectionRef = useRef<HTMLElement>(null);
  const mainTitleRef = useRef<HTMLHeadingElement>(null);
  const closingThoughtRef = useRef<HTMLParagraphElement>(null);
  const timelineContainerRef = useRef<HTMLDivElement>(null);
  const { t } = useLanguage();

  const timelineEventsData: TimelineEventDataItem[] = [
    {
      periodKey: "story.event1.period", defaultPeriod: "Anni '[ANNO INIZIO ATTIVITA' NONNO - DA INSERIRE]'",
      titleKey: "story.event1.title", defaultTitle: "Le Radici del Sapore: L'Inizio di un Sogno",
      descriptionKey: "story.event1.description", defaultDescription: "Tutto ebbe inizio con nonno [Nome Nonno - DA INSERIRE]. Con mani sapienti e un cuore colmo di dedizione per la terra trentina, piantò il seme di un'attività destinata a fiorire, fondata su qualità autentica e fiducia incrollabile.",
      imageSrc: "/images/melinda_golden.jpg",
      imageAltKey: "story.event1.imageAlt", defaultImageAlt: "Nonno Bottamedi con le prime mele Golden, simbolo di tradizione e inizio attività"
    },
    {
      periodKey: "story.event2.period", defaultPeriod: "Anni '[ANNI ATTIVITA' PAPA' - DA INSERIRE]'",
      titleKey: "story.event2.title", defaultTitle: "L'Orizzonte si Allarga: Crescita e Innovazione",
      descriptionKey: "story.event2.description", defaultDescription: "L'eredità sbocciò ulteriormente con papà [Nome Papà - DA INSERIRE]. Le albe trascorse ai mercati, la ricerca instancabile delle primizie più prelibate e il consolidamento dei rapporti trasformarono la passione in un servizio ortofrutticolo strutturato e apprezzato in tutto il Trentino.",
      imageSrc: "/images/pomodori_cuore_bue.jpg",
      imageAltKey: "story.event2.imageAlt", defaultImageAlt: "Papà Bottamedi tra cassette di pomodori cuore di bue, simbolo di espansione"
    },
    {
      periodKey: "story.event3.period", defaultPeriod: "Oggi: Un Legame Indissolubile",
      titleKey: "story.event3.title", defaultTitle: "Il Futuro nelle Nostre Mani: Passione che Continua",
      descriptionKey: "story.event3.description", defaultDescription: "Oggi, Pierluigi [Eventuali altri nomi - DA INSERIRE] e tutta la famiglia Bottamedi custodiscono questa fiamma. Freschezza assoluta, genuinità incontaminata e un rapporto diretto e trasparente, sia al dettaglio nel nostro Banchetto che all'ingrosso per il settore HORECA, proiettano la nostra storia nel futuro.",
      imageSrc: "/images/kiwi_cuore.jpg",
      imageAltKey: "story.event3.imageAlt", defaultImageAlt: "La famiglia Bottamedi oggi, con un cuore di kiwi freschi a simboleggiare la passione continua"
    }
  ];

  const timelineEvents: TimelineEvent[] = timelineEventsData.map(event => ({
    imageSrc: event.imageSrc, 
    period: t(event.periodKey, event.defaultPeriod),
    title: t(event.titleKey, event.defaultTitle),
    description: t(event.descriptionKey, event.defaultDescription),
    imageAlt: t(event.imageAltKey, event.defaultImageAlt),
  }));


  useEffect(() => {
    const currentSectionRef = sectionRef.current;
    if (!timelineContainerRef.current || !mainTitleRef.current || !closingThoughtRef.current || !currentSectionRef) return;
    
    const gsapCtx = gsap.context(() => {
      gsap.from(mainTitleRef.current, {
          autoAlpha: 0, y: 30, duration: 0.8, ease: 'power2.out',
          scrollTrigger: { trigger: mainTitleRef.current, start: "top 85%", toggleActions: "play none none none" }
      });

      const items = gsap.utils.toArray<HTMLDivElement>(".timeline-item", timelineContainerRef.current);
      const line = timelineContainerRef.current.querySelector<HTMLDivElement>(".timeline-line-draw");

      if(line){
          gsap.set(line, {scaleY: 0, transformOrigin: 'top center'});
          gsap.to(line, {
              scaleY: 1, duration: items.length * 0.7, ease: 'none',
              scrollTrigger: {
                  trigger: timelineContainerRef.current, start: "top center",
                  end: "bottom center+=150", scrub: 1.2,
              }
          });
      }

      items.forEach((item, index) => {
        const imageContainer = item.querySelector<HTMLDivElement>('.timeline-image-container');
        const image = item.querySelector('img');
        const content = item.querySelector<HTMLDivElement>('.timeline-content-container');
        const dot = item.querySelector<HTMLDivElement>('.timeline-dot-outer');

        const tl = gsap.timeline({
          scrollTrigger: { trigger: item, start: "top 80%", toggleActions: "play none none none" }
        });
        
        tl.from(dot, { scale: 0, autoAlpha: 0, duration: 0.6, ease: 'back.out(2)' }, index * 0.1);

        if(imageContainer && image){
          tl.from(imageContainer, {
              autoAlpha: 0, scale: 0.85, rotationZ: index % 2 === 0 ? -8 : 8,
              duration: 0.9, ease: 'expo.out'
          }, "-=0.4")
          .from(image, { scale: 1.2, duration: 1.2, ease: 'power2.out' }, "<");
        }
        
        if(content){
          const periodText = content.querySelector('.timeline-period');
          const titleText = content.querySelector('h3');
          const descText = content.querySelector('p');
          gsap.set([periodText, titleText, descText], {autoAlpha:0});
          tl.from([periodText, titleText, descText], {
              autoAlpha: 0, y: 25, x: index % 2 === 0 ? -15 : 15,
              stagger: 0.15, duration: 0.7, ease: 'power2.out'
          }, "-=0.6");
        }
      });
      
      gsap.from(closingThoughtRef.current, {
          autoAlpha: 0, y: 30, duration: 0.8, ease: 'power2.out',
          scrollTrigger: { trigger: closingThoughtRef.current, start: "top 90%", toggleActions: "play none none none" }
      });
    }, currentSectionRef); 

    return () => gsapCtx.revert();
  }, [t, timelineEvents]); // timelineEvents added to re-render correctly if data changes due to language.

  return (
    <Section id="storia" ref={sectionRef} aria-labelledby="storia-title-main" className="overflow-hidden bg-brand-gray-light">
      <div className="text-center mb-12 md:mb-16">
        <h2 ref={mainTitleRef} id="storia-title-main" className="text-3xl md:text-4xl lg:text-5xl font-bold font-serif text-brand-green-dark mb-4">
          {t('story.mainTitle', 'La Saga dei Sapori: Tre Generazioni, Un\'Unica Passione.')}
        </h2>
      </div>
      <div ref={timelineContainerRef} className="relative max-w-4xl mx-auto px-2 md:px-4">
        <div className="hidden md:block absolute top-0 bottom-0 left-1/2 w-1 bg-brand-green-light transform -translate-x-1/2 rounded-full">
           <div className="timeline-line-draw absolute top-0 left-0 w-full h-full bg-brand-green transform scale-y-0 rounded-full"></div>
        </div>

        {timelineEvents.map((event, index) => (
          <div key={index} className={`timeline-item md:flex items-center my-10 md:my-24 relative ${index % 2 !== 0 ? 'md:flex-row-reverse' : ''}`}>
            <div className="timeline-dot-outer hidden md:block absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
              <div className="w-6 h-6 bg-brand-orange rounded-full border-4 border-white shadow-lg flex items-center justify-center">
                <div className="w-2.5 h-2.5 bg-white rounded-full"></div>
              </div>
            </div>
            
            <div className="md:w-5/12 p-2 md:p-0 timeline-image-container">
              <img 
                src={event.imageSrc} 
                alt={event.imageAlt} 
                width={500} 
                height={312} 
                className="rounded-xl shadow-2xl w-full h-auto object-cover aspect-[16/10] transform transition-all duration-500 hover:scale-105" 
              />
            </div>
            <div className={`md:w-7/12 p-4 timeline-content-container ${index % 2 !== 0 ? 'md:pl-12 lg:pl-20' : 'md:pr-12 lg:pr-20'}`}>
               <span className="timeline-period block text-sm text-brand-orange font-semibold mb-1.5 uppercase tracking-wider">{event.period}</span>
               <h3 className="text-2xl lg:text-3xl font-serif font-bold text-brand-gray-dark mb-3">{event.title}</h3>
               <p className="text-brand-gray-dark leading-relaxed text-base lg:text-lg">{event.description}</p>
            </div>
          </div>
        ))}
      </div>
       <p ref={closingThoughtRef} className="mt-16 md:mt-24 text-center text-lg italic text-brand-gray-dark max-w-3xl mx-auto px-4">
          {t('story.closingThought', 'Bottamedi: una sinfonia di famiglia, coltivata con la melodia della natura, per orchestrare ogni giorno il capolavoro del gusto sulla vostra tavola.')}
        </p>
    </Section>
  );
};

export default StorySection;
========================================
Content of: src/components/sections/WholesaleSection.tsx
========================================
import React, { useEffect, useRef } from 'react';
import Section from '../ui/Section';
import Button from '../ui/Button';
import { CheckCircleIcon, TruckIcon, StarIcon, UserGroupIcon as HandShakeIcon } from '../icons/HeroIcons'; 
import { gsap } from 'gsap';
import { useLanguage } from '../../contexts/LanguageContext';

const WholesaleSection: React.FC = () => {
    const sectionRef = useRef<HTMLElement>(null);
    const textContentRef = useRef<HTMLDivElement>(null);
    const imageContentRef = useRef<HTMLDivElement>(null);
    const { t } = useLanguage();
    
    const scrollToSection = (sectionId: string) => {
    gsap.to(window, { duration: 1.2, scrollTo: { y: `#${sectionId}`, offsetY: 70 }, ease: 'power3.inOut' });
  };

  const featuresData = [
    { icon: CheckCircleIcon, textKey: "wholesale.feature1", defaultText: "Approvvigionamento d'eccellenza: solo produttori fidati e mercati selezionati per garantire qualità superiore e freschezza impareggiabile." },
    { icon: TruckIcon, textKey: "wholesale.feature2", defaultText: "Logistica su misura: consegne flessibili e puntuali, 6 giorni su 7, in aree concordate. La tua attività non rimarrà mai senza il meglio." },
    { icon: StarIcon, textKey: "wholesale.feature3", defaultText: "Controllo qualità maniacale: ogni prodotto è ispezionato per assicurare sapore intenso, aspetto invitante e presentazione impeccabile." },
    { icon: HandShakeIcon, textKey: "wholesale.feature4", defaultText: "Consulenza personalizzata HORECA: Pierluigi è il tuo referente diretto per prezzi competitivi, consigli esperti e un rapporto di fiducia solido e duraturo." },
  ];

  const features = featuresData.map(f => ({ ...f, text: t(f.textKey, f.defaultText) }));

  useEffect(() => {
    const currentSectionRef = sectionRef.current;
    if (!textContentRef.current || !imageContentRef.current || !currentSectionRef) return;
    
    const gsapCtx = gsap.context(() => {
      const tl = gsap.timeline({
          scrollTrigger: {
              trigger: currentSectionRef,
              start: "top 65%", 
              toggleActions: "play none none none"
          }
      });

      const title = textContentRef.current?.querySelector('h2');
      const subtitle = textContentRef.current?.querySelector('h3');
      const paragraph = textContentRef.current?.querySelector('p');
      const listItems = gsap.utils.toArray<HTMLLIElement>('ul li', textContentRef.current);
      const contactPierluigiText = textContentRef.current?.querySelector('.contact-pierluigi-text');
      const ctaButton = textContentRef.current?.querySelector('button');

      gsap.set([title, subtitle, paragraph, ...listItems, contactPierluigiText, ctaButton], {autoAlpha:0});

      tl.from([title, subtitle], { autoAlpha: 0, x: -60, stagger: 0.18, duration: 0.8, ease: 'power3.out' })
      .from(paragraph, { autoAlpha:0, x: -50, duration: 0.7, ease: 'power2.out'}, "-=0.5")
      .from(listItems, { autoAlpha: 0, x: -40, stagger: 0.12, duration: 0.6, ease: 'power2.out' }, "-=0.4")
      .from([contactPierluigiText, ctaButton], { autoAlpha: 0, y: 25, stagger: 0.15, duration: 0.6, ease: 'back.out(1.4)' }, "-=0.3");

      tl.from(imageContentRef.current, {
          autoAlpha: 0, scale: 0.8, x: 60, rotationZ: 5,
          duration: 1.1, ease: 'elastic.out(1, 0.65)'
      }, 0.2);
    }, currentSectionRef); 

    return () => gsapCtx.revert();
  }, [t]);


  return (
    <Section id="ingrosso" ref={sectionRef} aria-labelledby="ingrosso-title" className="bg-white">
      <div className="grid md:grid-cols-2 gap-10 md:gap-16 items-center">
        <div ref={textContentRef} className="md:pr-8">
          <h2 id="ingrosso-title" className="text-3xl md:text-4xl lg:text-5xl font-bold font-serif text-brand-green-dark mb-4">
            {t('wholesale.title', 'Partner d\'Eccellenza per la Tua Cucina Professionale')}
          </h2>
          <h3 className="text-xl lg:text-2xl text-brand-gray-dark font-semibold mb-6">
            {t('wholesale.subtitle', 'Servizio HORECA: Freschezza Insuperabile, Affidabilità Totale.')}
          </h3>
          <p className="text-brand-gray-dark mb-8 leading-relaxed">
           {t('wholesale.description', 'Professionisti della ristorazione, hotel, catering e negozi alimentari del Trentino: elevate la vostra offerta con la qualità Bottamedi. Tre generazioni di esperienza per forniture ortofrutticole impeccabili, prodotti freschissimi e un servizio di consegna personalizzato che rispetta i vostri tempi e le vostre esigenze.')}
          </p>
          <ul className="space-y-5 mb-8">
            {features.map((feature, index) => {
              const Icon = feature.icon;
              return (
                <li key={index} className="flex items-start">
                  <Icon className="h-7 w-7 text-brand-orange mr-4 mt-0.5 flex-shrink-0" />
                  <span className="text-brand-gray-dark text-base">{feature.text}</span>
                </li>
              );
            })}
          </ul>
           <p className="text-brand-gray-dark font-medium mb-6 contact-pierluigi-text">
            {t('wholesale.contactPierluigi', 'Per listini su misura e consulenza diretta, contatta')} <strong>Pierluigi</strong>: 
            <a href="tel:0461602534" className="text-brand-green hover:underline ml-1 font-semibold">0461 602534</a>.
          </p>
          <Button onClick={() => scrollToSection('contatti')} variant="primary" size="lg" className="shadow-md hover:shadow-lg">
            {t('wholesale.cta', 'Richiedi Info Ingrosso')}
          </Button>
        </div>
        <div ref={imageContentRef}>
          <img 
            src="/images/albicocche_ingrosso.jpg" 
            alt={t('wholesale.imageAlt', 'Casse di albicocche fresche e ordinate, pronte per la fornitura ingrosso HORECA da Bottamedi')} 
            width={600} 
            height={800} 
            className="rounded-xl shadow-2xl w-full h-auto object-cover aspect-[4/5] md:aspect-[3/4.2] transform hover:shadow-brand-green/30 transition-shadow duration-300" />
        </div>
      </div>
    </Section>
  );
};

export default WholesaleSection;
========================================
Content of: src/components/sections/WhyUsSection.tsx
========================================
import React, { useEffect, useRef } from 'react';
import Section from '../ui/Section';
import { FeatureItem } from '../../types';
import { LeafIcon, StarIcon as MedalIcon, HeartIcon as UsersIcon, MapPinIcon } from '../icons/HeroIcons'; 
import { gsap } from 'gsap';
import { useLanguage } from '../../contexts/LanguageContext';

interface FeatureDataItem {
  icon: React.ElementType; 
  imageSrc: string; 
  alt?: string; 
  titleKey: string;
  defaultTitle: string;
  descriptionKey: string;
  defaultDescription: string;
  altKey: string;
  defaultAlt: string;
}

const WhyUsSection: React.FC = () => {
  const sectionRef = useRef<HTMLElement>(null);
  const titleRef = useRef<HTMLHeadingElement>(null);
  const subtitleRef = useRef<HTMLParagraphElement>(null);
  const cardsRef = useRef<(HTMLDivElement | null)[]>([]);
  const { t } = useLanguage();

  const featuresData: FeatureDataItem[] = [
    {
      icon: LeafIcon,
      titleKey: "whyus.feature1.title", defaultTitle: "Freschezza Assoluta: Il Nostro Credo",
      descriptionKey: "whyus.feature1.description", defaultDescription: "Ogni mattina, selezioniamo personalmente solo il meglio. Collaborazioni dirette con produttori di fiducia per garantirti un prodotto che profuma ancora di campo, vibrante di sapore e nutrimento.",
      imageSrc: "/images/kiwi_gialli_pattern.jpg",
      altKey: "whyus.feature1.alt", defaultAlt: "Pattern ipnotico di kiwi gialli freschi, simbolo di freschezza assoluta"
    },
    {
      icon: MedalIcon,
      titleKey: "whyus.feature2.title", defaultTitle: "Qualità d'Eccellenza: L'Arte della Scelta",
      descriptionKey: "whyus.feature2.description", defaultDescription: "L'esperienza di tre generazioni si traduce in un occhio infallibile per l'eccellenza. Solo i prodotti che superano i nostri rigorosi standard arrivano sulla tua tavola o nella tua attività.",
      imageSrc: "/images/mele_montagna.jpg",
      altKey: "whyus.feature2.alt", defaultAlt: "Splendide mele di montagna in cassetta, simbolo di qualità d'eccellenza"
    },
    {
      icon: UsersIcon,
      titleKey: "whyus.feature3.title", defaultTitle: "Cuore di Famiglia: Passione Contagiosa",
      descriptionKey: "whyus.feature3.description", defaultDescription: "Non siamo solo fornitori, siamo una famiglia che condivide una passione. Ti accogliamo con un sorriso, ti consigliamo con sincerità, perché la tua soddisfazione è la nostra più grande ricompensa.",
      imageSrc: "/images/kiwi_cuore.jpg",
      altKey: "whyus.feature3.alt", defaultAlt: "Kiwi di varie tonalità disposti a formare un cuore, simbolo della passione familiare"
    },
    {
      icon: MapPinIcon,
      titleKey: "whyus.feature4.title", defaultTitle: "Radici Trentine: Autenticità Garantita",
      descriptionKey: "whyus.feature4.description", defaultDescription: "Amiamo profondamente il nostro Trentino. Valorizziamo i suoi produttori e ti offriamo l'autenticità dei sapori locali, per un'esperienza di gusto genuina e indimenticabile.",
      imageSrc: "/images/bottamedi_logo_solofrutta_glow.jpg",
      altKey: "whyus.feature4.alt", defaultAlt: "Logo luminoso di Bottamedi Frutta e Verdura, che simboleggia le radici nel territorio trentino"
    }
  ];

  const features: FeatureItem[] = featuresData.map(f => ({
    icon: f.icon,
    imageSrc: f.imageSrc,
    title: t(f.titleKey, f.defaultTitle),
    description: t(f.descriptionKey, f.defaultDescription),
    alt: t(f.altKey, f.defaultAlt),
  }));

  useEffect(() => {
    const currentSectionRef = sectionRef.current;
    if (!currentSectionRef || !titleRef.current || !subtitleRef.current) return;
    
    const gsapCtx = gsap.context(() => {
      gsap.set([titleRef.current, subtitleRef.current], {autoAlpha:0});
      gsap.from([titleRef.current, subtitleRef.current], {
        autoAlpha:0, y:40, stagger: 0.2, duration: 0.9, ease: 'power3.out',
        scrollTrigger: { trigger: currentSectionRef, start: 'top 75%', toggleActions: 'play none none none' }
      });
      
      cardsRef.current.forEach((card, index) => {
        if (!card) return;
        const image = card.querySelector('img');
        gsap.set(card, {autoAlpha:0});

        gsap.from(card, {
          autoAlpha: 0, y: 60, scale: 0.9, rotationX: -15, 
          duration: 0.9, ease: 'expo.out', stagger: 0.15 * index, // Corrected stagger to be a single value or object
          scrollTrigger: { trigger: card, start: "top 85%", toggleActions: "play none none none" }
        });

        if(image && window.innerWidth > 768) { 
          gsap.to(image, {
              yPercent: -20, ease: "none",
              scrollTrigger: { trigger: card, start: "top bottom", end: "bottom top", scrub: 1.5 }
          });
        }
      });
    }, currentSectionRef); 

    return () => gsapCtx.revert();
  }, [t]); 


  return (
    <Section id="perche-noi" ref={sectionRef} aria-labelledby="perche-noi-title" className="bg-brand-gray-extralight overflow-hidden">
      <div className="text-center mb-12 md:mb-16">
        <h2 ref={titleRef} id="perche-noi-title" className="text-3xl md:text-4xl lg:text-5xl font-bold font-serif text-brand-green-dark mb-4">
          {t('whyus.title', 'Il Segreto della Nostra Unicità')}
        </h2>
        <p ref={subtitleRef} className="text-lg md:text-xl text-brand-gray-dark max-w-3xl mx-auto leading-relaxed">
          {t('whyus.subtitle', 'Scegliere Bottamedi non è solo acquistare frutta e verdura. È abbracciare una filosofia di freschezza impareggiabile, qualità certificata e un\'attenzione al cliente che solo una famiglia appassionata può offrirti.')}
        </p>
      </div>
      <div className="grid md:grid-cols-2 gap-8 lg:gap-12">
        {features.map((feature, index) => {
          const Icon = feature.icon;
          return (
            <div 
              key={index} 
              ref={el => { cardsRef.current[index] = el; }}
              className="bg-white rounded-2xl shadow-xl overflow-hidden group transform transition-all duration-300 hover:shadow-brand-green/25 hover:-translate-y-2.5 hover:shadow-2xl"
            >
              <div className="h-64 w-full overflow-hidden"> 
                <img 
                  src={feature.imageSrc} 
                  alt={feature.alt || feature.title} 
                  width="600" 
                  height="400" 
                  className="w-full h-full object-cover transform transition-transform duration-500 group-hover:scale-110 ease-out" />
              </div>
              <div className="p-6 md:p-8">
                <div className="flex items-center mb-4">
                  <Icon className="h-10 w-10 text-brand-orange mr-4 flex-shrink-0" />
                  <h3 className="text-2xl lg:text-3xl font-serif font-semibold text-brand-gray-dark">{feature.title}</h3>
                </div>
                <p className="text-brand-gray-dark leading-relaxed text-base">{feature.description}</p>
              </div>
            </div>
          );
        })}
      </div>
    </Section>
  );
};

export default WhyUsSection;
========================================
Content of: src/components/ui/Button.tsx
========================================
import React, { useRef, useEffect } from 'react';
import { gsap } from 'gsap';

interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  children: React.ReactNode;
  variant?: 'primary' | 'secondary' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  className?: string;
}

const Button: React.FC<ButtonProps> = ({
  children,
  variant = 'primary',
  size = 'md',
  className = '',
  ...props
}) => {
  const buttonRef = useRef<HTMLButtonElement>(null);

  const baseStyles = "font-semibold rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 transition-all duration-300 ease-in-out transform hover:scale-105 relative overflow-hidden";

  const variantStyles = {
    primary: "bg-brand-green text-white hover:bg-brand-green-dark focus:ring-brand-green",
    secondary: "bg-white text-brand-green border-2 border-brand-green hover:bg-brand-green-light hover:text-white focus:ring-brand-green",
    ghost: "bg-transparent text-white hover:bg-white hover:bg-opacity-20 focus:ring-white",
  };

  const sizeStyles = {
    sm: "px-4 py-2 text-sm",
    md: "px-6 py-2.5 text-base",
    lg: "px-8 py-3 text-lg",
  };
  
  useEffect(() => {
    const button = buttonRef.current;
    if (!button) return;

    const gsapCtx = gsap.context(() => {
      const createRipple = (event: MouseEvent) => {
          const ripple = document.createElement("span");
          const rect = button.getBoundingClientRect();
          const diameter = Math.max(rect.width, rect.height) * 1.5;
          const x = event.clientX - rect.left - diameter / 2;
          const y = event.clientY - rect.top - diameter / 2;

          ripple.style.width = ripple.style.height = `${diameter}px`;
          ripple.style.left = `${x}px`;
          ripple.style.top = `${y}px`;
          ripple.classList.add("button-ripple"); 
          
          let rippleColor = 'rgba(255, 255, 255, 0.3)'; 
          if (variant === 'secondary') {
              rippleColor = 'rgba(26, 122, 76, 0.2)'; 
          }
          ripple.style.backgroundColor = rippleColor;
          
          button.appendChild(ripple);

          gsap.fromTo(ripple, 
              { scale: 0, autoAlpha: 0.7 },
              { 
                  scale: 2, autoAlpha: 0, duration: 0.6, 
                  ease: "power2.out", onComplete: () => ripple.remove()
              }
          );
      };
      button.addEventListener('click', createRipple);
      return () => button.removeEventListener('click', createRipple);
    }, button); 

    return () => gsapCtx.revert();
  }, [variant]);


  return (
    <button
      ref={buttonRef}
      className={`${baseStyles} ${variantStyles[variant]} ${sizeStyles[size]} ${className}`}
      {...props}
    >
      <span className="relative z-10">{children}</span>
    </button>
  );
};

export default Button;
========================================
Content of: src/components/ui/Gallery.tsx
========================================
import React, { useEffect, useRef } from 'react';
import { GalleryItemData } from '../../types';
import { gsap } from 'gsap';

interface GalleryProps {
  items: GalleryItemData[];
  onItemClick: (item: GalleryItemData) => void;
}

const Gallery: React.FC<GalleryProps> = ({ items, onItemClick }) => {
  const galleryContainerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const currentGalleryContainerRef = galleryContainerRef.current;
    if (!currentGalleryContainerRef) return;

    const gsapCtx = gsap.context(() => {
      const galleryItems = gsap.utils.toArray<HTMLDivElement>(".gallery-item", currentGalleryContainerRef);

      galleryItems.forEach((itemEl, index) => {
        if (!itemEl) return;

        const image = itemEl.querySelector('img');
        const overlayContent = itemEl.querySelector('.gallery-item-overlay-content');
        
        gsap.set(itemEl, {autoAlpha:0});
        gsap.from(itemEl, {
          autoAlpha: 0, y: 60, scale: 0.85, rotationZ: gsap.utils.random(-5, 5),
          duration: 0.7, delay: index * 0.1, ease: 'expo.out',
          scrollTrigger: {
            trigger: itemEl, start: "top 90%", toggleActions: "play none none none"
          }
        });

        const tl = gsap.timeline({ paused: true });
        tl.to(image, { scale: 1.12, duration: 0.45, ease: 'power2.out' })
          .to(itemEl, { 
              z: 30, rotationY: index % 2 === 0 ? -6 : 6, rotationX: 4,
              boxShadow: "0px 20px 35px rgba(0,0,0,0.25)",
              duration: 0.35, ease: 'power1.out'
          }, 0)
          .to(overlayContent, { autoAlpha: 1, y: 0, duration: 0.35, ease: 'power2.out' }, 0.05);

        itemEl.addEventListener('mouseenter', () => tl.play());
        itemEl.addEventListener('mouseleave', () => tl.reverse());
      });
    }, currentGalleryContainerRef);

    return () => gsapCtx.revert();
  }, [items]);

  const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>, item: GalleryItemData) => {
    if (event.key === 'Enter' || event.key === ' ') {
      event.preventDefault();
      onItemClick(item);
    }
  };

  return (
    <div ref={galleryContainerRef} className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-3 gap-6 md:gap-8" style={{ perspective: "1200px" }}>
      {items.map((item) => (
        <div
          key={item.id}
          className="gallery-item group relative rounded-xl overflow-hidden cursor-pointer shadow-lg hover:shadow-2xl transition-shadow duration-300 aspect-[4/3] will-change-transform focus:outline-none focus:ring-2 focus:ring-brand-green focus:ring-offset-2"
          onClick={() => onItemClick(item)}
          onKeyDown={(e) => handleKeyDown(e, item)}
          tabIndex={0} 
          role="button" 
          aria-label={`Visualizza ${item.title}`}
          style={{ transformStyle: "preserve-3d" }} 
        >
          <img 
            src={item.thumb} 
            alt={item.alt} 
            width={400} 
            height={300} 
            className="w-full h-full object-cover" />
          <div className="absolute inset-0 bg-gradient-to-t from-black/85 via-black/40 to-transparent flex items-end p-4 md:p-5 gallery-item-overlay-content opacity-0 transform translate-y-5">
            <h3 className="text-white text-lg md:text-xl font-semibold">
              {item.title}
            </h3>
          </div>
        </div>
      ))}
    </div>
  );
};

export default Gallery;
========================================
Content of: src/components/ui/LanguageCookieModal.tsx
========================================
import React, { useState, useEffect, useRef } from 'react';
import { useLanguage } from '../../contexts/LanguageContext';
import Button from './Button'; 
import { GlobeAltIcon } from '../icons/HeroIcons'; 
import { gsap } from 'gsap';

const LanguageCookieModal: React.FC = () => {
  const { setLanguage, language } = useLanguage(); 
  const [isVisible, setIsVisible] = useState(false);
  const modalRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const storedLang = localStorage.getItem('bottamedi_lang');
    const consentGiven = localStorage.getItem('bottamedi_cookie_consent');
    if (!storedLang || !consentGiven) {
      setIsVisible(true);
    }
  }, []);

  useEffect(() => {
    const currentModalRef = modalRef.current;
    if (isVisible && currentModalRef) {
        const gsapCtx = gsap.context(() => {
            gsap.set(currentModalRef, { autoAlpha: 0, scale: 0.9, y: 20 });
            gsap.to(currentModalRef, { 
                autoAlpha: 1, scale: 1, y: 0, duration: 0.5, ease: 'expo.out', delay: 0.2 
            });
        }, currentModalRef);
        return () => gsapCtx.revert();
    }
  }, [isVisible]);

  const handleAccept = (selectedLang: 'it' | 'de') => {
    setLanguage(selectedLang); 
    localStorage.setItem('bottamedi_cookie_consent', 'true'); 
    
    if (modalRef.current) {
      const gsapCtx = gsap.context(() => { // Create a context for this specific animation
        gsap.to(modalRef.current, { 
          autoAlpha: 0, scale: 0.9, y: 20, duration: 0.3, ease: 'power2.in',
          onComplete: () => setIsVisible(false)
        });
      }, modalRef.current);
      // No explicit revert needed here as it's a one-off animation on an element that might unmount.
      // However, if setIsVisible(false) doesn't unmount immediately, a revert could be useful.
      // For simplicity, relying on unmount or onComplete.
    } else {
      setIsVisible(false);
    }
  };

  if (!isVisible) {
    return null;
  }

  const initialTitle = "Benvenuto! / Willkommen!";
  const cookieMessageCombined = language === 'de' ? 
    "Wir verwenden Cookies für das beste Erlebnis und Ihre Sprachwahl. Mit Klick auf eine Sprache stimmen Sie zu." :
    "Utilizziamo i cookie per assicurarti la migliore esperienza e ricordare la tua lingua. Cliccando su una lingua, acconsenti.";
  const initialSelectLabel = language === 'de' ? "Sprache wählen:" : "Seleziona lingua:";


  return (
    <div className="fixed inset-0 bg-gray-900 bg-opacity-70 backdrop-blur-md flex items-center justify-center z-[200] p-4">
      <div ref={modalRef} className="bg-white p-6 md:p-8 rounded-xl shadow-2xl max-w-md w-full text-center opacity-0"> {/* Initial opacity 0 for GSAP */}
        <GlobeAltIcon className="h-16 w-16 text-brand-green mx-auto mb-4 animate-subtle-bob" />
        <h2 className="text-2xl font-serif font-bold text-brand-gray-dark mb-3">
          {initialTitle}
        </h2>
        
        <p className="text-sm text-brand-gray-dark mb-6">
          {cookieMessageCombined}
        </p>

        <div className="mb-4">
          <label htmlFor="language-select-modal" className="block text-sm font-medium text-brand-gray-dark mb-3">
            {initialSelectLabel}
          </label>
          <div className="flex flex-col sm:flex-row justify-center space-y-3 sm:space-y-0 sm:space-x-3">
            <Button 
              onClick={() => handleAccept('it')}
              variant={language === 'it' ? "primary" : "secondary"} 
              size="md"
              className="w-full sm:w-1/2 border-brand-green"
              aria-label="Seleziona Italiano"
            >
              Italiano 🇮🇹
            </Button>
            <Button 
              onClick={() => handleAccept('de')}
              variant={language === 'de' ? "primary" : "secondary"}
              size="md"
              className="w-full sm:w-1/2 border-brand-green"
              aria-label="Select German"
            >
              Deutsch 🇩🇪
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LanguageCookieModal;
========================================
Content of: src/components/ui/Preloader.tsx
========================================
import React, { useEffect, useRef } from 'react';
import { gsap } from 'gsap';
import { TextPlugin } from 'gsap/TextPlugin'; // TextPlugin is used here
import { useLanguage } from '../../contexts/LanguageContext';

// GSAP Plugin registration is now in App.tsx

const Preloader: React.FC = () => {
  const logoRef = useRef<HTMLImageElement>(null);
  const textRef = useRef<HTMLParagraphElement>(null);
  const preloaderRef = useRef<HTMLDivElement>(null);
  const { t } = useLanguage();

  useEffect(() => {
    const currentPreloaderRef = preloaderRef.current;
    if (!logoRef.current || !currentPreloaderRef || !textRef.current) return;

    const gsapCtx = gsap.context(() => {
      gsap.set(logoRef.current, { autoAlpha: 0, scale: 0.4, rotation: -180, y: -50 });
      gsap.set(textRef.current, { autoAlpha: 0, y: 20 });
      gsap.set(currentPreloaderRef, { autoAlpha: 1 });

      const loadingText = t('preloader.loading', "Esplosione di freschezza in arrivo...");
      
      const tl = gsap.timeline();

      tl.to(logoRef.current, {
        autoAlpha: 1, scale: 1, rotation: 0, y: 0,
        duration: 1.4, ease: 'elastic.out(1, 0.5)', delay: 0.2
      })
      .to(logoRef.current, {
        scale: 1.08, duration: 0.35, yoyo: true, repeat: 1, ease: 'power1.inOut'
      }, "-=0.5")
      .to(textRef.current, { 
          autoAlpha: 1, y: 0, duration: 0.6, ease: 'power2.out'
      }, "-=1.2")
      .to(textRef.current, { 
          duration: loadingText.length * 0.04,
          text: { value: loadingText, delimiter: "" }, // TextPlugin usage
          ease: "none"
      }, "<+=0.2");
    }, currentPreloaderRef); 

    return () => gsapCtx.revert();
  }, [t]);

  return (
    <div ref={preloaderRef} className="fixed inset-0 bg-white flex flex-col items-center justify-center z-[200] overflow-hidden">
      <img 
        ref={logoRef}
        src="/images/bottamedi_logo_solofrutta_glow.jpg" 
        alt={t('header.logoAlt', 'Bottamedi Logo')}
        width={128} 
        height={128} 
        className="w-24 h-24 md:w-32 md:h-32"
      />
      <p ref={textRef} className="text-brand-green-dark font-medium mt-6 text-lg md:text-xl tracking-wide"></p>
    </div>
  );
};

export default Preloader;
========================================
Content of: src/components/ui/Section.tsx
========================================
import React from 'react';

interface SectionProps extends React.HTMLAttributes<HTMLElement> {
  children: React.ReactNode;
  className?: string;
}

const Section: React.FC<SectionProps> = ({ children, className = '', ...props }) => {
  return (
    <section className={`py-16 md:py-24 ${className}`} {...props}>
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        {children}
      </div>
    </section>
  );
};

export default Section;
========================================
Content of: src/components/icons/HeroIcons.tsx
========================================
import React from 'react';

export const MenuIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => ( 
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
  </svg>
);

export const MenuAlt3Icon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => ( 
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M3.75 5.25h16.5m-16.5 4.5h16.5m-16.5 4.5h16.5m-16.5 4.5h16.5" />
  </svg>
);


export const XIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M6 18L18 6M6 6l12 12" />
  </svg>
);

export const CheckCircleIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
  </svg>
);

export const TruckIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M8.25 18.75a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m3 0h6m-9 0H3.375a1.125 1.125 0 01-1.125-1.125V14.25m17.25 4.5a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m3 0h1.125c.621 0 1.129-.504 1.09-1.124a17.902 17.902 0 00-3.213-9.193 2.056 2.056 0 00-1.58-.86H14.25M16.5 18.75h-2.25m0-11.177v-.958c0-.568-.422-1.048-.988-1.106A48.354 48.354 0 0011.25 6H9.75M8.25 6H7.5m0 0H5.25m2.25 0V5.25m0 0V4.5m0 0V3.75M21 12H3.375m17.625 0H12.75" />
  </svg>
);

export const StarIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => ( 
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M11.48 3.499a.562.562 0 011.04 0l2.125 5.111a.563.563 0 00.475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 00-.182.557l1.285 5.385a.562.562 0 01-.82.61l-4.725-2.885a.563.563 0 00-.652 0l-4.725 2.885a.562.562 0 01-.82-.61l1.285-5.385a.562.562 0 00-.182-.557l-4.204-3.602a.563.563 0 01.321-.988l5.518-.442a.563.563 0 00.475-.345L11.48 3.5z" />
  </svg>
);

export const UserGroupIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => ( 
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
        <path strokeLinecap="round" strokeLinejoin="round" d="M18 18.72a9.094 9.094 0 003.741-.479 3 3 0 00-3.741-1.144M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9 6.75a9.094 9.094 0 01-3.741-.479 3 3 0 013.741-1.144m0-11.25a9.094 9.094 0 00-3.741.479 3 3 0 003.741 1.144M12 21a9.094 9.094 0 003.741-.479 3 3 0 00-3.741-1.144m-7.482 0a9.094 9.094 0 013.741.479 3 3 0 01-3.741 1.144M3 12a9.094 9.094 0 013.741-6.975 3 3 0 01-3.741 1.145M12 3a9.094 9.094 0 013.741 6.975 3 3 0 01-3.741-1.145m0 11.25a3 3 0 100-6 3 3 0 000 6z" />
    </svg>
);

export const LeafIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M21.25 9.375c0 6.166-4.5 11.25-10.125 11.25S1 15.541 1 9.375C1 3.209 5.405 1 11.125 1S21.25 3.209 21.25 9.375zM12 11.25c1.068 0 2.063.204 2.969.567M12 11.25a8.625 8.625 0 00-5.93 2.078M12 11.25v8.438m0-8.438c-1.068 0-2.063.204-2.969.567M12 11.25c-2.667 0-5.022.966-6.875 2.531" />
  </svg>
);

export const MedalIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => ( 
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M16.5 18.75h-9m9 0a3 3 0 013 3h-15a3 3 0 013-3m9 0v-4.5A4.5 4.5 0 0012 9.75 4.5 4.5 0 007.5 14.25v4.5m4.5-9a3 3 0 013-3h.008a3 3 0 013 3v1.5a3 3 0 01-3 3h-.008a3 3 0 01-3-3v-1.5zm-6 0a3 3 0 013-3h.008a3 3 0 013 3v1.5a3 3 0 01-3 3h-.008a3 3 0 01-3-3v-1.5z" />
  </svg>
);

export const HeartIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => ( 
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z" />
  </svg>
);

export const MapPinIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => ( 
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M15 10.5a3 3 0 11-6 0 3 3 0 016 0z" />
    <path strokeLinecap="round" strokeLinejoin="round" d="M19.5 10.5c0 7.142-7.5 11.25-7.5 11.25S4.5 17.642 4.5 10.5a7.5 7.5 0 1115 0z" />
  </svg>
);

export const PhoneIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => ( 
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M2.25 6.75c0 8.284 6.716 15 15 15h2.25a2.25 2.25 0 002.25-2.25v-1.372c0-.516-.351-.966-.852-1.091l-4.423-1.106c-.44-.11-.902.055-1.173.417l-.97 1.293c-.282.376-.769.542-1.21.38a12.035 12.035 0 01-7.143-7.143c-.162-.441.004-.928.38-1.21l1.293-.97c.363-.271.527-.734.417-1.173L6.963 3.102a1.125 1.125 0 00-1.091-.852H4.5A2.25 2.25 0 002.25 4.5v2.25z" />
  </svg>
);

export const PhoneArrowUpRightIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => ( 
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M19.5 12c0-3.036-1.834-5.632-4.5-6.756V3.75a1.5 1.5 0 00-3 0v1.348A6.965 6.965 0 007.5 12c0 1.71.627 3.284 1.673 4.5H4.5a1.5 1.5 0 000 3h15a1.5 1.5 0 000-3h-4.72A6.991 6.991 0 0019.5 12zM15 9.75a3 3 0 11-6 0 3 3 0 016 0z" />
    <path strokeLinecap="round" strokeLinejoin="round" d="M19.5 4.5l-6.75 6.75M19.5 4.5v4.5M19.5 4.5h-4.5" />
  </svg>
);


export const MailIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M21.75 6.75v10.5a2.25 2.25 0 01-2.25 2.25h-15a2.25 2.25 0 01-2.25-2.25V6.75m19.5 0A2.25 2.25 0 0019.5 4.5h-15a2.25 2.25 0 00-2.25 2.25m19.5 0v.243a2.25 2.25 0 01-1.07 1.916l-7.5 4.615a2.25 2.25 0 01-2.36 0L3.32 8.91a2.25 2.25 0 01-1.07-1.916V6.75" />
  </svg>
);

export const GlobeAltIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M12 21a9.004 9.004 0 008.716-6.747M12 21a9.004 9.004 0 01-8.716-6.747M12 21c2.485 0 4.5-4.03 4.5-9S14.485 3 12 3m0 18c-2.485 0-4.5-4.03-4.5-9S9.515 3 12 3m0 0a8.997 8.997 0 017.843 4.582M12 3a8.997 8.997 0 00-7.843 4.582m15.686 0A11.953 11.953 0 0112 10.5c-2.998 0-5.74-1.1-7.843-2.918m15.686 0A8.959 8.959 0 0121 12c0 .778-.099 1.533-.284 2.253m0 0A11.978 11.978 0 0112 16.5c-2.998 0-5.74-1.1-7.843-2.918m15.686 0A8.959 8.959 0 0021 12c0-.778.099-1.533.284-2.253M18.75 14.25a2.25 2.25 0 11-4.5 0 2.25 2.25 0 014.5 0zM12 10.5a2.25 2.25 0 11-4.5 0 2.25 2.25 0 014.5 0zM5.25 14.25a2.25 2.25 0 11-4.5 0 2.25 2.25 0 014.5 0z" />
  </svg>
);

export const ExternalLinkIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25" />
  </svg>
);

export const HomeIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M2.25 12l8.954-8.955c.44-.439 1.152-.439 1.591 0L21.75 12M4.5 9.75v10.125c0 .621.504 1.125 1.125 1.125H9.75v-4.875c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21h4.125c.621 0 1.125-.504 1.125-1.125V9.75M8.25 21h7.5" />
  </svg>
);

export const BookOpenIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M12 6.042A8.967 8.967 0 006 3.75c-1.052 0-2.062.18-3 .512v14.25A8.987 8.987 0 016 18c2.305 0 4.408.867 6 2.292m0-14.25a8.966 8.966 0 016-2.292c1.052 0 2.062.18 3 .512v14.25A8.987 8.987 0 0018 18a8.967 8.967 0 00-6 2.292m0-14.25v14.25" />
  </svg>
);

export const ShoppingBagIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M15.75 10.5V6a3.75 3.75 0 10-7.5 0v4.5m11.356-1.993l1.263 12c.07.665-.45 1.243-1.119 1.243H4.25a1.125 1.125 0 01-1.12-1.243l1.264-12A1.125 1.125 0 015.513 7.5h12.974c.576 0 1.059.435 1.119 1.007zM8.625 10.5a.375.375 0 11-.75 0 .375.375 0 01.75 0zm7.5 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z" />
  </svg>
);

export const BuildingStorefrontIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M13.5 21v-7.5a.75.75 0 01.75-.75h3a.75.75 0 01.75.75V21m-4.5 0H2.36m11.14 0H18m0 0h2.64m-13.5 0H18m-6.75 0h.008v.008H11.25V21Zm0-9.75h5.625c.621 0 1.125-.504 1.125-1.125V3.375c0-.621-.504-1.125-1.125-1.125H8.25V11.25Z" />
  </svg>
);

export const SparklesIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L1.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 003.09 3.09L16.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09zM18.25 12L17 13.75M18.25 12L19.5 10.25M18.25 12L16.5 11.25M18.25 12L19.5 12.75" />
    <path strokeLinecap="round" strokeLinejoin="round" d="M12.75 3.5L12 5.25M12.75 3.5L13.5 2.25M12.75 3.5L11.25 2.75M12.75 3.5L12 3.5" />
    <path strokeLinecap="round" strokeLinejoin="round" d="M12.75 20.5L12 18.75M12.75 20.5L13.5 21.75M12.75 20.5L11.25 21.25M12.75 20.5L12 20.5" />
    <path strokeLinecap="round" strokeLinejoin="round" d="M3.5 12.75L5.25 12M3.5 12.75L2.25 13.5M3.5 12.75L2.75 11.25M3.5 12.75L3.5 12" />
    <path strokeLinecap="round" strokeLinejoin="round" d="M20.5 12.75L18.75 12M20.5 12.75L21.75 13.5M20.5 12.75L21.25 11.25M20.5 12.75L20.5 12" />
  </svg>
);

export const IdentificationIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M15.75 6a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0zM4.501 20.118a7.5 7.5 0 0114.998 0A17.933 17.933 0 0112 21.75c-2.676 0-5.216-.584-7.499-1.632z" />
  </svg>
);

export const MapIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => ( 
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M9 6.75V15m0 0v2.25m0-2.25h1.5m1.5 0H12m0 0V6.75m0 0H9m3 0h1.5m0 0h.75m-1.5 0V5.25m0 0V3M9 15h4.5M3 12h18M3 12V7.5M21 12V7.5m0 4.5V15m0 0v2.25m0 0h-1.5m-1.5 0H12m0 0V15m0 0h3m0 0h-1.5m1.5 0V12m0 0V7.5M6 12h.008v.008H6V12zm4.5 0h.008v.008H10.5V12zm4.5 0h.008v.008H15V12z" />
  </svg>
);

export const ChevronUpIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M4.5 15.75l7.5-7.5 7.5 7.5" />
  </svg>
);
export const ChevronDownIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
  <path strokeLinecap="round" strokeLinejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
</svg>
);
========================================
Content of: src/contexts/LanguageContext.tsx
========================================
import React, { createContext, useState, useContext, ReactNode, useEffect } from 'react';
import { translations, Locale, Translations } from '../translations';

interface LanguageContextType {
  language: Locale;
  setLanguage: (language: Locale) => void;
  t: (key: string, defaultValue?: string, params?: Record<string, string | number>) => string;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export const LanguageProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [language, setLanguageState] = useState<Locale>('it'); // Default to Italian

  useEffect(() => {
    const storedLang = localStorage.getItem('bottamedi_lang') as Locale | null;
    if (storedLang && (storedLang === 'it' || storedLang === 'de')) {
      setLanguageState(storedLang);
      document.documentElement.lang = storedLang;
    } else {
      document.documentElement.lang = 'it'; // Default if nothing stored
    }
  }, []);

  const setLanguage = (lang: Locale) => {
    setLanguageState(lang);
    localStorage.setItem('bottamedi_lang', lang);
    document.documentElement.lang = lang;
  };

  const t = (key: string, defaultValue?: string, params?: Record<string, string | number>): string => {
    const keys = key.split('.');
    let result: string | Translations | undefined = translations[language];

    for (const k of keys) {
      if (typeof result === 'object' && result !== null && k in result) {
        result = (result as Translations)[k];
      } else {
        result = undefined;
        break;
      }
    }
    
    let finalResult = typeof result === 'string' ? result : defaultValue || key;

    if (params && typeof finalResult === 'string') {
        Object.keys(params).forEach(paramKey => {
            finalResult = (finalResult as string).replace(new RegExp(`{{${paramKey}}}`, 'g'), String(params[paramKey]));
        });
    }

    return finalResult as string;
  };

  return (
    <LanguageContext.Provider value={{ language, setLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = (): LanguageContextType => {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};
========================================
Content of: src/components/ui/LanguageCookieModal.tsx
========================================
import React, { useState, useEffect, useRef } from 'react';
import { useLanguage } from '../../contexts/LanguageContext';
import Button from './Button'; 
import { GlobeAltIcon } from '../icons/HeroIcons'; 
import { gsap } from 'gsap';

const LanguageCookieModal: React.FC = () => {
  const { setLanguage, language } = useLanguage(); 
  const [isVisible, setIsVisible] = useState(false);
  const modalRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const storedLang = localStorage.getItem('bottamedi_lang');
    const consentGiven = localStorage.getItem('bottamedi_cookie_consent');
    if (!storedLang || !consentGiven) {
      setIsVisible(true);
    }
  }, []);

  useEffect(() => {
    const currentModalRef = modalRef.current;
    if (isVisible && currentModalRef) {
        const gsapCtx = gsap.context(() => {
            gsap.set(currentModalRef, { autoAlpha: 0, scale: 0.9, y: 20 });
            gsap.to(currentModalRef, { 
                autoAlpha: 1, scale: 1, y: 0, duration: 0.5, ease: 'expo.out', delay: 0.2 
            });
        }, currentModalRef);
        return () => gsapCtx.revert();
    }
  }, [isVisible]);

  const handleAccept = (selectedLang: 'it' | 'de') => {
    setLanguage(selectedLang); 
    localStorage.setItem('bottamedi_cookie_consent', 'true'); 
    
    if (modalRef.current) {
      const gsapCtx = gsap.context(() => { 
        gsap.to(modalRef.current, { 
          autoAlpha: 0, scale: 0.9, y: 20, duration: 0.3, ease: 'power2.in',
          onComplete: () => setIsVisible(false)
        });
      }, modalRef.current);
    } else {
      setIsVisible(false);
    }
  };

  if (!isVisible) {
    return null;
  }

  const initialTitle = "Benvenuto! / Willkommen!";
  const cookieMessageCombined = language === 'de' ? 
    "Wir verwenden Cookies für das beste Erlebnis und Ihre Sprachwahl. Mit Klick auf eine Sprache stimmen Sie zu." :
    "Utilizziamo i cookie per assicurarti la migliore esperienza e ricordare la tua lingua. Cliccando su una lingua, acconsenti.";
  const initialSelectLabel = language === 'de' ? "Sprache wählen:" : "Seleziona lingua:";


  return (
    <div className="fixed inset-0 bg-gray-900 bg-opacity-70 backdrop-blur-md flex items-center justify-center z-[200] p-4">
      <div ref={modalRef} className="bg-white p-6 md:p-8 rounded-xl shadow-2xl max-w-md w-full text-center opacity-0"> {/* Initial opacity 0 for GSAP */}
        <GlobeAltIcon className="h-16 w-16 text-brand-green mx-auto mb-4 animate-subtle-bob" />
        <h2 className="text-2xl font-serif font-bold text-brand-gray-dark mb-3">
          {initialTitle}
        </h2>
        
        <p className="text-sm text-brand-gray-dark mb-6">
          {cookieMessageCombined}
        </p>

        <div className="mb-4">
          <label htmlFor="language-select-modal" className="block text-sm font-medium text-brand-gray-dark mb-3">
            {initialSelectLabel}
          </label>
          <div className="flex flex-col sm:flex-row justify-center space-y-3 sm:space-y-0 sm:space-x-3">
            <Button 
              onClick={() => handleAccept('it')}
              variant={language === 'it' ? "primary" : "secondary"} 
              size="md"
              className="w-full sm:w-1/2 border-brand-green"
              aria-label="Seleziona Italiano"
            >
              Italiano 🇮🇹
            </Button>
            <Button 
              onClick={() => handleAccept('de')}
              variant={language === 'de' ? "primary" : "secondary"}
              size="md"
              className="w-full sm:w-1/2 border-brand-green"
              aria-label="Select German"
            >
              Deutsch 🇩🇪
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LanguageCookieModal;
